<!-- *************************GO-LICENSE-START******************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<project basedir="..">
    <import file="should_run.xml"/>
    <import file="common_properties.xml"/>
    <import file="compile.xml"/>
    <import file="ivy.xml"/>
    <import file="server/macros.xml"/>
    <import file="obfuscate.xml"/>
    <import file="taskdefs.xml"/>
    <import file="filesets.xml"/>
    <import file="database.xml"/>
    <import file="dist_osx.xml"/>
    <import file="clean.xml"/>

    <property file="build.properties"/>
    <property name="config.xsd" value="${basedir}/common/src/com/thoughtworks/go/config/cruise-config.xsd"/>
    <property name="target.common.dist" value="${target}/dist/common"/>
    <property name="target.util.dist" value="${target}/dist/util"/>
    <property name="target.tfs-impl.dist" value="${target}/dist/tfs-impl"/>
    <property name="target.test-utils.dist" value="${target}/dist/test-utils"/>
    <property name="target.agent.dist" value="${target}/dist/agent"/>
    <property name="target.agent-bootstrapper.dist" value="${target}/dist/agent-bootstrapper"/>
    <property name="target.agent.dist.pkg" value="${target.agent.dist}/pkg"/>
    <property name="target.server.dist" value="${target}/dist/server"/>
    <property name="target.server.dist.pkg" value="${target.server.dist}/pkg"/>
    <property name="dist.agent.zip.prefix" value="go-agent-${cc.version}"/>
    <property name="dist.agent.zip.dir.release" location="${dir.agent}/release"/>
    <property name="dist.server.module_name" value="go-server"/>
    <property name="dist.server.zip.prefix" value="go-server-${cc.version}"/>
    <property name="dist.agent.module_name" value="go-agent"/>

    <target name="dist.agent-bootstrapper" depends="dist.agent-bootstrapper.jar"/>

    <!--<target name="dist.fast" depends="dist.common, dist.agent, dist.server, dist.agent-bootstrapper"/>-->
    <target name="dist.fast" depends="dist.buildr"/>

    <target name="dist.osx" depends="dist.fast, dist.agent.osx, dist.server.osx"/>
    <!-- temp tasks to facilitate automating the UAT deployment -->
    <target name="dist.agent" depends="compile.agent, dist.agent.jar, dist.agent.zip, dist.agent.mock_server, dist.tfs-impl"/>
    <target name="dist.common" depends="dist.common.src, dist.common.test"/>
    <target name="dist.tfs-impl" depends="dist.tfs-impl.src, dist.tfs-impl.test"/>
    <target name="dist.server" depends="dist.server.war, dist.server.zip, dist.server.war.development,dist.tfs-impl"/>


    <target name="dist.obfuscate" depends="dist.common, obfuscate"/>

    <target name="dist.common.src" if="run.common" depends="-run?, compile.common.src">
        <mkdir dir="${target.common.dist}"/>
        <jar destfile="${target.common.dist}/common.jar">
            <fileset dir="${target.common.classes.product}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${dir.common.src}">
                <include name="**/*.xsl"/>
                <include name="**/*.xsd"/>
            </fileset>
        </jar>
        <ivy-publish module="common" jars="${target.common.dist}"/>
    </target>

    <target name="dist.common.test" if="run.common.test" depends="-run-test?, compile.common.test">
        <mkdir dir="${target.common.dist}"/>
        <jar destfile="${target.common.dist}/common-test.jar">
            <fileset dir="${target.common.classes.test}">
                <include name="**/*.class"/>
            </fileset>
        </jar>
        <ivy-publish module="common" jars="${target.common.dist}"/>
    </target>


    <target name="dist.tfs-impl.src" if="run.tfs-impl" depends="-run?, compile.tfs-impl.src">
        <mkdir dir="${target.tfs-impl.dist}"/>
        <jar destfile="${target.tfs-impl.dist}/tfs-impl.jar">
            <fileset dir="${target.tfs-impl.classes.product}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${dir.tfs-impl.src}">
                <include name="**/*.xsl"/>
                <include name="**/*.xsd"/>
            </fileset>
        </jar>
        <ivy-publish module="tfs-impl" jars="${target.tfs-impl.dist}"/>
    </target>

    <target name="dist.tfs-impl.test" if="run.tfs-impl.test" depends="-run-test?, compile.tfs-impl.test">
        <mkdir dir="${target.tfs-impl.dist}"/>
        <jar destfile="${target.tfs-impl.dist}/tfs-impl-test.jar">
            <fileset dir="${target.tfs-impl.classes.test}">
                <include name="**/*.class"/>
            </fileset>
        </jar>
        <ivy-publish module="tfs-impl" jars="${target.tfs-impl.dist}"/>
    </target>

    <target name="dist.util.src" if="run.util" depends="-run?, compile.util.src">
        <mkdir dir="${target.util.dist}"/>
        <jar destfile="${target.util.dist}/util.jar">
            <fileset dir="${target.util.classes.product}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${dir.util.src}">
                <include name="**/*.xsl"/>
                <include name="**/*.xsd"/>
            </fileset>
        </jar>
        <ivy-publish module="util" jars="${target.util.dist}"/>
    </target>

    <target name="dist.util.test" if="run.util.test" depends="-run-test?, compile.util.test">
        <mkdir dir="${target.util.dist}"/>
        <jar destfile="${target.util.dist}/util-test.jar">
            <fileset dir="${target.util.classes.test}">
                <include name="**/*.class"/>
            </fileset>
        </jar>
        <ivy-publish module="util" jars="${target.util.dist}"/>
    </target>

    <target name="dist.test-utils.src" if="run.test-utils" depends="-run?, compile.test-utils.src">
        <mkdir dir="${target.test-utils.dist}"/>
        <jar destfile="${target.test-utils.dist}/test-utils.jar">
            <fileset dir="${target.test-utils.classes.product}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${dir.test-utils.src}">
                <include name="**/*.xsl"/>
                <include name="**/*.xsd"/>
                <include name="**/*.properties"/>
            </fileset>
        </jar>
        <ivy-publish module="test-utils" jars="${target.test-utils.dist}"/>
    </target>

    <target name="dist.test-utils.test" if="run.test-utils.test" depends="-run-test?, compile.test-utils.test">
        <mkdir dir="${target.test-utils.dist}"/>
        <jar destfile="${target.test-utils.dist}/test-utils-test.jar">
            <fileset dir="${target.test-utils.classes.test}">
                <include name="**/*.class"/>
            </fileset>
        </jar>
        <ivy-publish module="test-utils" jars="${target.test-utils.dist}"/>
    </target>

    <target name="dist.agent.mock_server" if="run.agent.test" depends="-run?, compile.agent">
        <property name="dir.agent.test.war" location="${dir.agent}/testdata/goserverstub"/>

        <mkdir dir="${target.agent.dist}"/>
        <copy flatten="true" todir="${target.agent.dist}/libs">
            <fileset dir="${ivy}" includes="**/*.jar"/>
        </copy>
        <war destfile="${target.agent.dist}/cruise-server-stub.war" webxml="${dir.agent.test.war}/WEB-INF/web.xml"
             duplicate="preserve">
            <manifest>
                <attribute name="Main-Class" value="com.thoughtworks.go.agent.testhelpers.FakeServer"/>
            </manifest>
            <fileset dir="${dir.agent.test.war}">
                <include name="WEB-INF/remoting-servlet.xml"/>
            </fileset>
            <classes dir="${target.agent.classes.test.unit}"/>
            <lib dir="${target.agent.dist}/libs">
                <include name="*.jar"/>
            </lib>
        </war>
    </target>

    <target name="dist.agent-bootstrapper.jar" if="run.agent"
            depends="-run?, compile.agent-bootstrapper.src, -preparing.dist.current_revision_number">
        <mkdir dir="${target.agent-bootstrapper.dist}"/>
        <path id="-classpath.agent-bootstrapper.path">
            <fileset dir="${dir.agent-bootstrapper.ivy}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <pathconvert property="-classpath.agent-bootstrapper.pathconvert" pathsep=" ">
            <map from="${dir.agent-bootstrapper}" to="."/>
            <path refid="-classpath.agent-bootstrapper.path"/>
        </pathconvert>

        <jar destfile="${target.agent-bootstrapper.dist}/main.jar">
            <manifest>
                <attribute name="Go-Version" value="${cc.version}(${-current.revision})"/>
                <attribute name="Main-Class" value="com.thoughtworks.go.agent.bootstrapper.AgentBootstrapper"/>
                <attribute name="Class-Path" value="${-classpath.agent-bootstrapper.pathconvert} ./config/"/>
            </manifest>
            <fileset dir="${target.agent-bootstrapper.classes.product}"/>
        </jar>

        <copy file="${dir.agent.properties}/MANIFEST.MF" todir="${target}" overwrite="true">
            <filterset>
                <filter token="CRUISE_VERSION" value="${cc.version}(${-current.revision})"/>
            </filterset>
        </copy>

        <one-jar destfile="${target.agent-bootstrapper.dist}/agent-bootstrapper.jar" manifest="${target}/MANIFEST.MF">
            <main jar="${target.agent-bootstrapper.dist}/main.jar"/>
            <lib>
                <fileset dir="${dir.agent-bootstrapper.ivy}"/>
            </lib>
        </one-jar>

        <ivy-publish module="agent-bootstrapper" jars="${target.agent-bootstrapper.dist}"/>
    </target>

    <target name="dist.agent.jar" if="run.agent"
            depends="-run?, compile.agent.src, -preparing.dist.current_revision_number">
        <mkdir dir="${target.agent.dist}"/>
        <path id="-classpath.agent.path">
            <fileset dir="${dir.agent.ivy}">
                <include name="**/*.jar"/>
            </fileset>
        </path>
        <pathconvert property="-classpath.agent.pathconvert" pathsep=" ">
            <map from="${dir.agent}" to="."/>
            <path refid="-classpath.agent.path"/>
        </pathconvert>

        <jar destfile="${target.agent.dist}/main.jar">
            <manifest>
                <attribute name="Main-Class" value="com.thoughtworks.go.agent.AgentMain"/>
                <attribute name="Class-Path" value="${-classpath.agent.pathconvert} ./config/"/>
                <attribute name="Go-Version" value="${cc.version}(${-current.revision})"/>
            </manifest>
            <fileset dir="${target.agent.classes.product}" excludes="**/log4j.properties"/>
        </jar>

        <copy file="${dir.agent.properties}/MANIFEST.MF" todir="${target}" overwrite="true">
            <filterset>
                <filter token="CRUISE_VERSION" value="${cc.version}(${-current.revision})"/>
            </filterset>
        </copy>

        <one-jar destfile="${target.agent.dist}/agent.jar" manifest="${target}/MANIFEST.MF">
            <main jar="${target.agent.dist}/main.jar"/>
            <lib>
                <fileset dir="${dir.agent.ivy}"/>
            </lib>
        </one-jar>
        <ivy-publish module="agent" jars="${target.agent.dist}"/>
    </target>

    <target name="dist.agent.zip" if="run.agent" depends="-run?, dist.buildr"/>

    <!--
    <target name="dist.agent.zip" if="run.agent" depends="-run?, dist.agent-bootstrapper.jar, dist.agent.jar, ivy.agent.release">
        <retrieve.dependencies module="agent-bootstrapper" conf="release" ivy.lib.dir="${dir.agent-bootstrapper.ivy}"/>
        <zip destfile="${target}/${dist.agent.zip.prefix}.zip" duplicate="preserve" compress="true" level="9">
            <zipfileset dir="${dist.agent.zip.dir.release}" prefix="${dist.agent.zip.prefix}">
                <exclude name="*.sh"/>
                <exclude name="*.zip"/>
                <exclude name="**/.svn"/>
                <exclude name="**/.svn/**"/>
            </zipfileset>
            <zipfileset file="${dist.agent.zip.dir.release}/agent.sh" prefix="${dist.agent.zip.prefix}"
                        filemode="0755"/>
            <zipfileset file="${dist.agent.zip.dir.release}/stop-agent.sh" prefix="${dist.agent.zip.prefix}"
                        filemode="0755"/>
            <zipfileset dir="${ivy}/agent-bootstrapper" prefix="${dist.agent.zip.prefix}" includes="*.jar"/>
            <zipfileset file="${dir.agent}/properties/log4j.properties" prefix="${dist.agent.zip.prefix}/config"/>
            <zipfileset file="${basedir}/LICENSE" prefix="${dist.agent.zip.prefix}"/>
        </zip>
        <macros.dist.deploy name="${dist.agent.zip.prefix}"/>
        <chmod file="${target}/${dist.agent.zip.prefix}/agent.sh" perm="0755"/>
        <chmod file="${target}/${dist.agent.zip.prefix}/stop-agent.sh" perm="0755"/>
        <copy file="${target}/${dist.agent.zip.prefix}.zip" todir="${target.pkg}"/>
    </target>
    -->

    <target name="dist.server.war.development" if="run.server.test"
            depends="-run-test?, compile.server.test, ivy.server.test, dist.server.war, -preparing.dist.server.properties.test">
        <mkdir dir="${target.server.dist}"/>
        <war destfile="${target.server.dist}/dashboard.war" webxml="${target.server.war}/WEB-INF/web.xml"
             duplicate="preserve">
            <fileset dir="${target.server.war}">
                <exclude name="javascripts"/>
            </fileset>
            <filename name="${target.server.war}/javascripts/all.js"/>
            <lib refid="fileset.server.lib.jetty6"/>
        </war>
    </target>


    <target name="dist.server.war" if="run.server"
            depends="-run?, compile.server.src, -preparing.dist.server, ivy.server.release, dist.agent-bootstrapper.jar, dist.agent.jar">
        <macros.db.refresh_from_template/>

        <pathconvert property="-classpath.server.pathconvert" pathsep=" " dirsep="/">
            <map from="${ivy}/jetty" to="./lib"/>
            <map from="${ivy}/j2ee" to="./lib"/>
            <map from="${ivy}/bouncycastle" to="./lib"/>
            <map from="${ivy}/joda-time" to="./lib"/>
            <map from="${ivy}/commons-io" to="./lib"/>
            <map from="${ivy}/log4j" to="./lib"/>
            <path>
                <fileset dir="${ivy}/jetty" includes="*.jar"/>
                <fileset dir="${ivy}/j2ee" includes="*.jar"/>
                <fileset dir="${ivy}/bouncycastle" includes="*jdk16*.jar"/>
                <fileset dir="${ivy}/joda-time" includes="*.jar"/>
                <fileset dir="${ivy}/commons-io" includes="*.jar"/>
                <fileset dir="${ivy}/log4j" includes="*.jar"/>
            </path>
        </pathconvert>
        <mkdir dir="${target.server.dist}/include/defaultFiles"/>
        <echo message="${target.server.war.classes}"/>
        <echo message="${target.common.war.classes}"/>

        <jar destfile="${target.server.dist}/main.jar">
            <manifest>
                <attribute name="Go-Version" value="${cc.version}(${-current.revision})"/>
                <attribute name="Main-Class" value="com.thoughtworks.go.server.util.GoLauncher"/>
                <attribute name="Class-Path" value="${-classpath.server.pathconvert} /etc/config/ ./config/ ."/>
            </manifest>
            <fileset dir="${target.server.war.classes}" includes="**/GoLauncher.class"/>
            <fileset dir="${target.server.war.classes}" includes="**/GoSslSocketConnector.class"/>
            <fileset dir="${target.server.war.classes}" includes="**/GoServer*.class"/>
            <fileset dir="${target.server.war.classes}" includes="**/StopJettyFromLocalhostServlet*.class"/>
	    <fileset dir="${target.common.war.classes}" includes="**/validators/*.class"/>
            <fileset dir="${target.common.war.classes}" includes="**/SystemEnvironment*.class"/>
            <fileset dir="${target.common.war.classes}" includes="**/OperatingSystem.class"/>
            <fileset dir="${target.util.classes.product}" includes="**/SystemUtil.class"/>
            <fileset dir="${target.util.classes.product}" includes="**/StreamConsumer.class"/>
            <fileset dir="${target.util.classes.product}" includes="**/InMemoryConsumer.class"/>
            <fileset dir="${target.util.classes.product}" includes="**/InMemoryStreamConsumer.class"/>
            <fileset dir="${target.util.classes.product}" includes="**/ConsoleOutputStreamConsumer.class"/>
            <fileset dir="${target.util.classes.product}" includes="**/CommandLineException.class"/>
            <fileset dir="${target.util.classes.product}" includes="**/ExceptionUtils.class"/>
            <fileset dir="${target.common.war.classes}" includes="**/X509CertificateGenerator*.class"/>
            <fileset dir="${target.common.war.classes}" includes="**/X509PrincipalGenerator*.class"/>
            <fileset dir="${target.common.war.classes}" includes="**/KeyStoreManager.class"/>
            <fileset dir="${target.common.war.classes}" includes="**/PKCS12BagAttributeSetter.class"/>
            <fileset dir="${target.common.war.classes}" includes="**/KeyPairCreator.class"/>
            <fileset dir="${target.common.war.classes}" includes="**/Registration.class"/>
        </jar>

        <!-- Database -->
        <zip destfile="${target.server.dist}/include/defaultFiles/h2db.zip">
            <zipfileset dir="${dir.db}/h2db" prefix="h2db"/>
        </zip>

        <zip destfile="${target.server.dist}/include/defaultFiles/h2deltas.zip">
            <zipfileset dir="${dir.db}/migrate/h2deltas" prefix="h2deltas"/>
        </zip>

        <!-- Config -->
        <copy todir="${target.server.dist}/include/defaultFiles/config" file="${config.xsd}"/>
        <copy todir="${target.server.dist}/include/defaultFiles/config" file="${dir.server.release}/cruise-config.xml"/>
        <copy todir="${target.server.dist}/include/defaultFiles/config" file="${dir.server.release}/config.properties"/>
        <copy todir="${target.server.dist}/include/defaultFiles/config" file="${dir.server}/config/jetty.xml"/>
        <copy todir="${target.server.dist}/include/defaultFiles/config" file="${target.server.war.classes}/log4j.properties"/>

        <!-- Agent -->
        <copy todir="${target.server.dist}/include/defaultFiles" file="${ivy}/agent-bootstrapper/agent-bootstrapper.jar"/>
        <copy todir="${target.server.dist}/include/defaultFiles" file="${ivy}/agent/agent.jar"/>

        <!-- The Web App Itself -->
        <war destfile="${target.server.dist}/include/defaultFiles/cruise.war" webxml="${target.server.war}/WEB-INF/web.xml"
             duplicate="fail">
            <manifest>
                <attribute name="Go-Version" value="${cc.version}(${-current.revision})"/>
            </manifest>

            <fileset dir="${target.server.war}">
                <exclude name="**/applicationContext-development.xml"/>
                <exclude name="javascripts/*.js"/>
                <exclude name="**/log4j.properties"/>
            </fileset>

            <lib refid="fileset.server.lib.jetty6"/>
        </war>

        <manifest file="${target.server.dist}/MANIFEST.MF">
            <attribute name="Go-Version" value="${cc.version}(${-current.revision})"/>
            <attribute name="Class-Path" value="${-classpath.server.pathconvert} /etc/config/ ./config/ ."/>
        </manifest>

        <one-jar destfile="${target.server.dist}/cruise.jar" manifest="${target.server.dist}/MANIFEST.MF">
            <main jar="${target.server.dist}/main.jar"/>
            <lib>
                <fileset dir="${ivy}/jetty" prefix="lib">
                    <exclude name="*-ant-*"/>
                    <include name="*.jar"/>
                </fileset>
                <fileset dir="${ivy}/j2ee" prefix="lib" includes="*.jar"/>
                <fileset dir="${ivy}/urlrewrite" prefix="lib" includes="*.jar"/>
                <fileset dir="${ivy}/bouncycastle" prefix="lib" includes="*jdk16*.jar"/>
                <fileset dir="${ivy}/joda-time" prefix="lib" includes="*.jar"/>
                <fileset dir="${ivy}/commons-io" prefix="lib" includes="*.jar" excludes="*sources*"/>
                <fileset dir="${ivy}/log4j" prefix="lib" includes="*.jar"/>
            </lib>
            <fileset dir="${target.server.dist}/include"/>
            <fileset dir="${basedir}" includes="LICENSE"/>
            <fileset dir="${target.server.war.classes}" includes="**/GoMacLauncher*"/>
            <fileset dir="${target.server.war.classes}" includes="**/Mac*"/>
        </one-jar>
    </target>

    <target name="dist.buildr" depends="-preparing.dist.current_revision_number">
        <condition property="jruby.path" value="tools/bin/go.jruby.bat">
            <os family="windows"/>
        </condition>
        <condition property="jruby.path" value="tools/bin/go.jruby">
            <not><os family="windows"/></not>
        </condition>

        <exec executable="${jruby.path}">
           <arg line="-S buildr cruise:pkg:zip test=no ratchet=no"/>
        </exec>

         <!--copy over server and agent zip files to the locations that rest of the dist.* targets depend upon-->
        <!--<copy file="${target}/pkg/${new.dist.agent.zip.prefix}-${-current.revision.short}.zip" tofile="${target}/pkg/${new.dist.agent.zip.prefix}.zip"/>-->
        <!--<copy file="${target}/pkg/${new.dist.server.zip.prefix}-${-current.revision.short}.zip" tofile="${target}/pkg/${new.dist.server.zip.prefix}.zip"/>-->

        <!--<unzip dest="${target}/pkg" src="${target}/pkg/${new.dist.server.zip.prefix}.zip" overwrite="true"/>-->

        <!--<zip destfile="${target}/pkg/${dist.server.zip.prefix}.zip" duplicate="preserve" compress="true" level="9">-->
            <!--<zipfileset dir="${target}/pkg/${new.dist.server.zip.prefix}" prefix="${dist.server.zip.prefix}"/>-->
        <!--</zip>-->
        <!--<copy file="${target}/pkg/${dist.server.zip.prefix}-${-current.revision.short}.zip" tofile="${target}/${dist.server.zip.prefix}.zip"/>-->

        <!--<unzip dest="${target}/pkg" src="${target}/pkg/${new.dist.agent.zip.prefix}.zip" overwrite="true"/>-->
        <!--<zip destfile="${target}/pkg/${dist.agent.zip.prefix}.zip" duplicate="preserve" compress="true" level="9">-->
            <!--<zipfileset dir="${target}/pkg/${new.dist.agent.zip.prefix}" prefix="${dist.agent.zip.prefix}"/>-->
        <!--</zip>-->
        <!--<copy file="${target}/pkg/${dist.agent.zip.prefix}-${-current.revision.short}.zip" tofile="${target}/${dist.agent.zip.prefix}.zip"/>-->

         <!--fix server file permissions-->
        <!--<macros.dist.deploy name="${dist.server.zip.prefix}"/>-->
        <!--<chmod file="${target}/${dist.server.zip.prefix}/server.sh" perm="755"/>-->
        <!--<chmod file="${target}/${dist.server.zip.prefix}/stop-server.sh" perm="755"/>-->
        <!--<copy file="${target}/${dist.server.zip.prefix}.zip" todir="${target.pkg}"/>-->

         <!--fix agent file permissions-->
        <!--<macros.dist.deploy name="${dist.agent.zip.prefix}"/>-->
        <!--<chmod file="${target}/${dist.agent.zip.prefix}/agent.sh" perm="0755"/>-->
        <!--<chmod file="${target}/${dist.agent.zip.prefix}/stop-agent.sh" perm="0755"/>-->
        <!--<copy file="${target}/${dist.agent.zip.prefix}.zip" todir="${target.pkg}"/>-->
    </target>


    <target name="dist.server.zip" if="run.server" depends="-run?, dist.buildr"/>

    <!--
    <target name="dist.server.zip" if="run.server" depends="-run?, dist.server.war">
        <macros.db.refresh_from_template/>

        <zip destfile="${target}/${dist.server.zip.prefix}.zip" duplicate="preserve" compress="true" level="9">
            <zipfileset file="${target.server.dist}/cruise.jar" prefix="${dist.server.zip.prefix}"/>
            <zipfileset dir="${dir.server.release}" prefix="${dist.server.zip.prefix}">
                <exclude name="**/*.sh"/>
                <exclude name="**/*.xml"/>
                <exclude name="**/ant"/>
            </zipfileset>
            <zipfileset file="${dir.server.release}/server.sh" prefix="${dist.server.zip.prefix}" filemode="755"/>
            <zipfileset file="${dir.server.release}/stop-server.sh" prefix="${dist.server.zip.prefix}" filemode="755"/>
            <zipfileset file="${basedir}/LICENSE" prefix="${dist.server.zip.prefix}"/>
        </zip>
        <macros.dist.deploy name="${dist.server.zip.prefix}"/>
        <chmod file="${target}/${dist.server.zip.prefix}/server.sh" perm="755"/>
        <chmod file="${target}/${dist.server.zip.prefix}/stop-server.sh" perm="755"/>
        <copy file="${target}/${dist.server.zip.prefix}.zip" todir="${target.pkg}"/>
    </target>
    -->

    <target name="-preparing.dist.server"
            depends="-preparing.dist.server.copy_war_resources,
                    -preparing.dist.docs,
                    -preparing.dist.server.properties.src,
                    -preparing.dist.server.current_revision_number_in_file"/>

    <target name="-preparing.dist.server.properties.src" if="run.server"
            depends="-run?, -preparing.dist.server.copy_war_resources">
        <macros.server.prepare_properties filter="src"/>
        <replace file="${target.server.war.classes}/jdbc.properties" token="@port" value="${ports.db.production}"/>
    </target>

    <target name="-preparing.dist.server.properties.test" if="run.server.test" depends="-run-test?">
        <macros.server.prepare_properties filter="test"/>
    </target>


    <target name="-preparing.dist.server.copy_war_resources" if="run.server"
            depends="-run?, -preparing.compile.server.concat_js">

        <echo message="Copy war resources from ${target.server.war}"/>
        <echo message="Copy war resources to ${target.server.war.classes}"/>

        <mkdir dir="${target.server.war.classes}"/>
        <mkdir dir="${target.server.war}/css"/>

        <copy todir="${target.server.war}">
            <fileset dir="${dir.server.war}">
                <exclude name="**/classes/**"/>
            </fileset>
            <fileset file="${config.xsd}"/>
        </copy>
        <!-- Minify the css for performance -->
        <apply executable="java" parallel="false" verbose="true" force="true">
            <fileset dir="${target.server.war}/css" includes="*.css"/>
            <arg line="-jar"/>
            <arg path="localivy/yuicompressor/yuicompressor.jar"/>
            <arg line="--line-break 0"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="glob" from="*.css" to="${target.server.war}/css/*.css"/>
            <targetfile/>

        </apply>
    </target>


    <target name="-preparing.dist.docs" depends="-generate.help" unless="help.skip">
        <property name="target.server.war.docs" value="${target.server.war}/help"/>
        <mkdir dir="${target.server.war.docs}"/>
        <mkdir dir="${dir.docs.root}"/>
        <copy todir="${target.server.war.docs}">
            <fileset dir="${dir.docs.root}"></fileset>
        </copy>
    </target>
    <target name="-generate.help" unless="help.skip">
        <condition property="commandline" value="rake">
            <not>
                <os family="windows"/>
            </not>
        </condition>
        <condition property="commandline" value="rake.bat">
            <os family="windows"/>
        </condition>
        <exec dir="helper" executable="${commandline}">
            <arg value="build:site"/>
        </exec>
    </target>
    <target name="generate.help" depends="-generate.help"/>

    <target name="-preparing.dist.current_revision_number_available" depends="-run?">
        <available file="${basedir}/.git" property="-current_revision_number_available"/>
    </target>

    <target name="-preparing.dist.current_revision_number" if="-current_revision_number_available"
            depends="-preparing.dist.current_revision_number_available">
        <exec executable="sh" outputproperty="-current.revision" dir="${user.dir}">
            <arg value="-c"/>
            <arg value="git log --pretty=format:'' | wc -l"/>
        </exec>
        <echo message="Using current.revision ${-current.revision}" />
        <exec executable="sh" outputproperty="-current.revision.short" dir="${user.dir}">
            <arg value="-c"/>
            <arg value="git log --pretty=format:'' | wc -l"/>        </exec>
        <echo message="Using current.revision.short ${-current.revision.short}" />
        <!-- If we can't find the revision for some reason, set it to 'unknown revision' -->
        <property name="-current.revision" value="unknown-revision"/>
    </target>

    <target name="-preparing.dist.server.current_revision_number_in_file" if="-current_revision_number_file_available"
            depends="-preparing.dist.server.current_revision_number_file_available, -preparing.dist.current_revision_number">
        <echo file="${target.server.war}/WEB-INF/vm/admin/admin_version.txt.vm"
              message="${cc.version}(${-current.revision})"/>
        <echo file="${target.server.war}/WEB-INF/classes/ui/navigation/cruise_version.st"
              message="${cc.version} (${-current.revision})"/>
    </target>

    <target name="-preparing.dist.server.current_revision_number_file_available" if="run.server"
            depends="-run?, -preparing.dist.current_revision_number_available">
        <condition property="-current_revision_number_file_available">
            <and>
                <available file="${target.server.war}/WEB-INF/vm/admin"/>
                <isset property="-current_revision_number_available"/>
            </and>
        </condition>
    </target>

    <target name="dist.server.pkg.prep"
            depends="dist.server.zip, -preparing.dist.current_revision_number">
        <delete dir="${target.server.dist.pkg}"/>

        <!-- Create file layout -->
        <unzip src="${target.pkg}/${dist.server.zip.prefix}.zip" dest="${target.server.dist.pkg}/usr/share"/>
        <move file="${target.server.dist.pkg}/usr/share/${dist.server.zip.prefix}"
              tofile="${target.server.dist.pkg}/usr/share/${dist.server.module_name}"/>

        <mkdir dir="${target.server.dist.pkg}/etc/default"/>
        <mkdir dir="${target.server.dist.pkg}/etc/cruise"/>
        <mkdir dir="${target.server.dist.pkg}/var/lib/${dist.server.module_name}"/>
        <move file="${target.server.dist.pkg}/usr/share/${dist.server.module_name}/init.${dist.server.module_name}"
              tofile="${target.server.dist.pkg}/etc/init.d/${dist.server.module_name}"/>
        <move file="${target.server.dist.pkg}/usr/share/${dist.server.module_name}/default.${dist.server.module_name}"
              tofile="${target.server.dist.pkg}/etc/default/${dist.server.module_name}"/>
        <chmod perm="0755" file="${target.server.dist.pkg}/etc/init.d/${dist.server.module_name}"/>
        <chmod perm="0755" file="${target.server.dist.pkg}/usr/share/${dist.server.module_name}/server.sh"/>
        <chmod perm="0755" file="${target.server.dist.pkg}/usr/share/${dist.server.module_name}/stop-server.sh"/>

        <!-- Package layout into deb file -->
        <property name="${dist.server.module_name}.version" value="${cc.version}"/>
        <property name="${dist.server.module_name}.release" value="${-current.revision.short}"/>
    </target>

    <target name="dist.agent.pkg.prep"
            depends="dist.agent.zip, -preparing.dist.current_revision_number">
        <delete dir="${target.agent.dist.pkg}"/>
        <!-- Create file layout -->
        <unzip src="${target.pkg}/${dist.agent.zip.prefix}.zip" dest="${target.agent.dist.pkg}/usr/share"/>
        <move file="${target.agent.dist.pkg}/usr/share/${dist.agent.zip.prefix}"
              tofile="${target.agent.dist.pkg}/usr/share/${dist.agent.module_name}"/>
        <replace file="${target.agent.dist.pkg}/usr/share/${dist.agent.module_name}/config/log4j.properties"
                 token="${dist.agent.module_name}.log"
                 value="/var/log/${dist.agent.module_name}/${dist.agent.module_name}.log"/>
        <mkdir dir="${target.agent.dist.pkg}/etc/default"/>
        <mkdir dir="${target.agent.dist.pkg}/var/lib/${dist.agent.module_name}"/>
        <move file="${target.agent.dist.pkg}/usr/share/${dist.agent.module_name}/default.${dist.agent.module_name}"
              tofile="${target.agent.dist.pkg}/etc/default/${dist.agent.module_name}"/>
        <move file="${target.agent.dist.pkg}/usr/share/${dist.agent.module_name}/init.${dist.agent.module_name}"
              tofile="${target.agent.dist.pkg}/etc/init.d/${dist.agent.module_name}"/>
        <move file="${target.agent.dist.pkg}/usr/share/${dist.agent.module_name}/config"
              todir="${target.agent.dist.pkg}/var/lib/${dist.agent.module_name}"/>
        <chmod perm="0755" file="${target.agent.dist.pkg}/etc/init.d/${dist.agent.module_name}"/>
        <chmod perm="0755" file="${target.agent.dist.pkg}/usr/share/${dist.agent.module_name}/agent.sh"/>
        <chmod perm="0755" file="${target.agent.dist.pkg}/usr/share/${dist.agent.module_name}/stop-agent.sh"/>
        <property name="${dist.agent.module_name}.version" value="${cc.version}"/>
        <property name="${dist.agent.module_name}.release" value="${-current.revision.short}"/>
    </target>

    <macrodef name="macros.dist.deploy">
        <attribute name="name"/>
        <sequential>
            <delete dir="${target}/@{name}" quiet="true"/>
            <unzip dest="${target}" src="${target}/@{name}.zip" overwrite="true"/>
        </sequential>
    </macrodef>
</project>
