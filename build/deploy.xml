<!-- *************************GO-LICENSE-START******************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<project basedir="..">
    <import file="dist.xml" />

    <property name="deploy.pkg-zip" value="${target}/pkg.zip" />
    <property name="deploy.server.url" value="10.18.7.51" />

    <property name="deploy.server.username" value="root" />
    <property name="deploy.private-key-file" location="${user.home}/.ssh/id_rsa" />
    <property name="deploy.private-key-passphrase" value="" />
    <property name="installer.uat.path" value="????" />
    <property name="installer.filename" value="installer.deb" />

    <macrodef name="backup.server">
        <attribute name="server.url" />
        <sequential>
        <sshexec host="@{server.url}" username="root" passphrase="cruise" keyfile="${deploy.private-key-file}"
                 trust="true"
                 command="rm -rf /tmp/cruise-backup; mkdir /tmp/cruise-backup; /etc/init.d/cruise-server stop; cp -f /etc/cruise/cruise-config.xml /tmp/cruise-backup; cp -rf /var/lib/cruise-server/db /tmp/cruise-backup/db"/>
        </sequential>
    </macrodef>

    <target name="deploy.server.uat.manual">
        <echo message="Run ant deploy.server.uat to run this."/>
    </target>

    <target name="deploy.server.prod.manual">
        <echo message="Run ant deploy.server.prod to run this."/>
    </target>

    <target name="deploy.server.uat">
        <backup.server server.url="${uat.server.url}" />

        <!-- Run the installer on the server from a known location -->
        <!-- TODO: Get the installer location from the RESTful URL: --> 
        <!-- TODO: Update dist_deb.xml -->
        <sshexec host="${uat.server.url}" username="root" passphrase="cruise" keyfile="${deploy.private-key-file}"
                 trust="true"
                 command="cd ${installer.uat.path}; chmod 755 ${installer.filename}; dpkg --force-confdef -i ${installer.filename}" timeout="10000" failonerror="false"/>
        <waitfor maxwait="1" maxwaitunit="minute" checkevery="5" checkeveryunit="second" timeoutproperty="-server.restarted">
          <not>
              <http url="http://${uat.server.url}:8153/cruise/" />
          </not>
        </waitfor>
    </target>
<!--
    <target name="deploy.all">
        <fail message="Must either run deploy.testing or deploy.stable" />
    </target>

    <target name="-can.do.ssh?">
        <available classname="com.jcraft.jsch.JSch" property="jsch.present"/>
        <fail unless="jsch.present" message="Unable to find jsch in the Ant classpath. This is needed for ssh and scp tasks.${line.separator}Please see http://ant.apache.org/manual/install.html#librarydependencies for more info."/>
    </target>

    <target name="deploy.testing" description="Deploy the packages into 'testing' distribution"
            depends="-can.do.ssh?, deploy.set-properties.testing, deploy.update-remote-repos" />

    <target name="deploy.stable" description="Deploy the packages into 'stable' distribution"
            depends="-can.do.ssh?, deploy.set-properties.stable, deploy.update-remote-repos" />

    <target name="deploy.set-properties.testing">
        <fail if="deploy.target" message="Already set the deploy.target to ${deploy.target}"/>
        <property name="deploy.target" value="testing" />
    </target>

    <target name="deploy.set-properties.stable">
        <fail if="deploy.target" message="Already set the deploy.target to ${deploy.target}"/>
        <property name="deploy.target" value="stable" />
    </target>

    <target name="deploy.pkg.verify">
        <deploy.ensure-pkgs-exist suffixPattern=".deb" />
        <deploy.ensure-pkgs-exist suffixPattern=".rpm" />
        <deploy.ensure-pkgs-exist suffixPattern="-osx.zip" />
        <deploy.ensure-pkgs-exist suffixPattern="-setup.exe" />
    </target>

    <target name="deploy.pkg.zip" depends="dist.all, deploy.pkg.verify">
        <zip destfile="${deploy.pkg-zip}" compress="false">
            <zipfileset dir="${target.pkg}" prefix="pkg" />
        </zip>
    </target>

    <target name="deploy.pkg.upload" depends="deploy.pkg.zip">
        <tempfile property="deploy.uploaded-pkg-name" prefix="pkg-" suffix=".zip" destdir="/tmp" />
        <echo message="Uploading pkg.zip as ${deploy.uploaded-pkg-name} to ${deploy.server.url}" />
        <scp keyfile="${deploy.private-key-file}" verbose="true" passphrase="${deploy.private-key-passphrase}" trust="true"
             file="${deploy.pkg-zip}"
             remoteTofile="${deploy.server.username}@${deploy.server.url}:${deploy.uploaded-pkg-name}" />
        <deploy.server.exec command="rm -Rf /tmp/pkg; unzip -d /tmp ${deploy.uploaded-pkg-name} &amp;&amp; rm ${deploy.uploaded-pkg-name}"/>
    </target>

    <target name="deploy.update-remote-repos" depends="deploy.pkg.upload">
        <fail unless="deploy.target" message="Must set deploy.target" />
        <deploy.server.exec command="~/deploy-repos ${deploy.target}" />
        <deploy.server.exec command="~/update-repos" />
    </target>
-->
    <!-- Macros -->
<!--
    <macrodef name="deploy.ensure-pkgs-exist">
        <attribute name="suffixPattern" />
        <sequential>
            <deploy.ensure-file-exists filePattern="${target.pkg}/cruise-agent-*@{suffixPattern}" />
            <deploy.ensure-file-exists filePattern="${target.pkg}/cruise-server-*@{suffixPattern}" />
        </sequential>
    </macrodef>

    <macrodef name="deploy.ensure-file-exists">
        <attribute name="filePattern" />
        <sequential>
            <fail message="File @{filePattern} was not built">
                <condition>
                    <resourcecount when="ne" count="1">
                        <files includes="@{filePattern}" />
                    </resourcecount>
                </condition>
            </fail>
        </sequential>
    </macrodef>
-->
<!--
    <macrodef name="deploy.server.exec">
        <attribute name="command" />
        <attribute name="timeout" default="7200000" /> 
        <sequential>
            <sshexec host="${deploy.server.url}" username="${deploy.server.username}" keyfile="${deploy.private-key-file}" passphrase="${deploy.private-key-passphrase}" trust="true"
                     timeout="@{timeout}" command="@{command}"/>
        </sequential>
    </macrodef>
-->
 </project>
