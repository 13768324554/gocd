<?xml version="1.0"?>
<!-- *************************GO-LICENSE-START******************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<!DOCTYPE chapter SYSTEM "cruise_help.dtd">
<chapter title="Plugins in Go">
    <section title="Introduction">
        <p>
            Plugins,as the name implies,help in extending the functionality of Go. Go publishes a list of extension points for which plugins can be provided.
            An extension point published by the Go team - defines the interface and the lifecycle that governs the respective plugin.At present only Java
            based extension points and plugins are supported by Go.
        </p>

        Details about available extension points and their lifecycle can be obtained using this documentation along with the Go Plugin API reference.

    </section>

    <section title="Structure of a Go Plugin">
        <p>A plugin for Go is a JAR file with the following structure:</p>
        <code>
                plugin.jar
                |
                |-- META-INF
                |   \-- MANIFEST.MF
                |-- com
                |   \-- plugin
                |       \-- go
                |           \-- testplugin
                |               \-- SomePlugin.class
                |-- lib
                |   \-- dependency.jar
                |
                \-- plugin.xml
        </code>
        <p>
            The plugin jar is a self contained jar containing - all the plugin implementations classes, their dependencies
            and metadata about the plugin.
        </p>
        <bullets>
            <item>Packaging of the implementation classes is same, under the main jar root, as in any Java jar file.</item>
            <item>The implementation dependency jar files should be provided inside a
                <strong>lib</strong>
                directory under the main jar root.
                <i>This is optional if no dependency is a jar file.</i>
            </item>
            <item>The metadata is in form of the
                <strong>plugin.xml</strong>
                file.
                <i>This is optional too; the following section explains this metadata format and its usage in detail</i>
            </item>
        </bullets>

        <note>If you have worked with Java web applications, the structure of the plugin jar is similar to that of a
            <strong>war</strong>
            file.
        </note>

        <subsection title="Plugin Metadata" id="plugin_metadata">
            <p>Plugin metadata is a file that should be at the top level of the plugin JAR file, and should be named<strong>plugin.xml</strong>(lower-case).
            </p>
            Following is a sample plugin.xml file:
            <code>
                &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
                &lt;go-plugin id=&quot;testplugin.somePlugin&quot; version=&quot;1&quot;&gt;
                    &lt;about&gt;
                        &lt;name&gt;Some plugin name&lt;/name&gt;
                        &lt;version&gt;1.0.1&lt;/version&gt;
                        &lt;target-go-version&gt;12.4&lt;/target-go-version&gt;
                        &lt;description&gt;Some description goes here&lt;/description&gt;
                        &lt;vendor&gt;
                            &lt;name&gt;ThoughtWorks Go Team&lt;/name&gt;
                            &lt;url&gt;www.thoughtworks.com&lt;/url&gt;
                        &lt;/vendor&gt;
                        &lt;target-os&gt;
                            &lt;value&gt;Linux&lt;/value&gt;
                            &lt;value&gt;Windows&lt;/value&gt;
                        &lt;/target-os&gt;
                    &lt;/about&gt;
                &lt;/go-plugin&gt;
            </code>
            The metadata file contains information about the plugin and its provider. The significant attribute in this xml is the
            <strong>id</strong>
            attribute - which is used to uniquely identify the plugin.
            The
            <strong>id</strong>
            attribute mentioned in the plugin.xml file (in the example, it is<i>testplugin.somePlugin</i>) should be unique across all Go
            plugins. Since the plugin.xml file itself is optional, if it is not present, the plugin jar file name will be used as its ID.

            <note>The XML Schema for plugin descriptor: <exref url="resources/plugin-descriptor.xsd">plugin-descriptor.xsd</exref></note>
        </subsection>

        <subsection title="Plugin Extension Classes">
            <p>These are the classes in the JAR file, which implement the behaviour of the plugin.</p>
            For a Java class to be a valid plugin extension, it:

            <bullets>
                <item>Should be a<strong>public</strong>, non-abstract class.
                </item>
                <item>Should have a<strong>public</strong>, default (argument-less) constructor.
                </item>
                <item>Should implement a Go-exposed plugin interface.</item>
                <item>Should be annotated with<strong>@Extension</strong>.
                </item>
            </bullets>

            Here is an example plugin extension class (for the one shown above):
            <code>
                package com.plugin.go.testplugin;

                import com.thoughtworks.go.plugin.api.annotation.Extension;
                import com.thoughtworks.go.plugin.api.info.PluginDescriptor;
                import com.thoughtworks.go.plugin.api.info.PluginDescriptorAware;

                @Extension
                public class SomePlugin implements PluginDescriptorAware {
                    public void setPluginDescriptor(PluginDescriptor descriptor) {
                    }
                }
            </code>
            <p>Since it is a<strong>public</strong>, non-abstract class, which has a
                <strong>public</strong>
                default constructor, annotated with
                <strong>@Extension</strong>
                and implements a Go-exposed plugin interface (<strong>PluginDescriptorAware</strong>),
                it qualifies as a valid plugin extension and will be loaded by the Go plugin infrastructure.
            </p>
            A class can implement multiple plugin extension interfaces.In this case Go will register a *single* instance of the class for all the interfaces.
            This implies that the class be thread safe - since interface methods in the class may be invoked by multiple threads simultaneously.
            This is approach of single class multiple extenion interface is useful to maintain state across multiple extension points.
        </subsection>
        <subsection title="Dependency JAR directory (lib/)">
            <p>
                Any JAR you drop into the
                <strong>lib/</strong>
                directory of the plugin JAR file will be available(in their classpath) to the plugin extension classes and
                any other classes in the JAR file . In the plugin structure shown above,
                <strong>dependency.jar</strong>
                is the JAR whose classes will be
                available(in the classpath) to the code in<strong>SomePlugin.class</strong>.
            </p>
        </subsection>
    </section>
    <section title="Building a plugin">
        <subsection title="Plugin Essentials">
            <bullets>
                <item>Plugin API Jar: <exref url="resources/go-plugin-api-current.jar">go-plugin-api-current.jar</exref></item>
                <item>Plugin API Documentation: <exref url="resources/go-plugin-api-javadoc-current.jar">go-plugin-api-javadoc-current.jar</exref></item>
                <item>
                    Sample Plugins: A set of sample plugins that serves as a reference implementation <exref url="resources/go-sample-plugins.zip">go-sample-plugins.zip</exref>
                    (Start with README file in the zip)
                </item>
            </bullets>
        </subsection>
    </section>
    <section title="Installing a plugin">
        A directory named <strong>plugins</strong> exist at the same level as <i>server.sh/cmd</i> and <i>go.jar</i>.
        This directory consists of two sub directories
        <bullets>
            <item><strong>bundled</strong>: plugins bundled with Go. Any unbundled plugins put in this directory will be removed. The
            directory is meant exclusively for plugins bundled with the product.</item>
            <item><strong>external</strong>: all the unbundled plugins should be placed in this directory. This directory is recommended
            for use by plugin developers.If you have a Go plugin JAR file, you can drop it in this directory and restart the server.</item>
        </bullets>
    </section>
    <section title="Plugin Extension Point Lifecycle">
        Every plugin extension point is provided a callback at the time of its load and unload.
        A plugin extension point that wishes to initialize and release resources can make use of these
        callbacks.
        <subsection title="@Load">
         A method in an extension point implementation marked with <strong>@Load</strong> annotation will be called during the extension load time.
         Following is the expected semantics of the method with this annotation.
            <bullets>
                <item>The method should be public, non-static.</item>
                <item>The method should take only one input parameter of type <strong>com.thoughtworks.go.plugin.api.info.PluginContext</strong>.
                    Return values will be ignored..</item>
                <item>These annotations will not be inherited along with the method.</item>
                <item>There should be atmost one method with the annotation.</item>
            </bullets>
          An example callback is shown below
            <code>
                @Load
                public void onLoad(PluginContext context) {
                    System.out.println("Plugin loaded");
                }
            </code>
        </subsection>
        <subsection title="@UnLoad">
                 A method in an extension point implementation marked with <strong>@UnLoad</strong> annotation will be called during the extension unload time.
                 Following is the expected semantics of the method with this annotation.
                    <bullets>
                        <item>The method should be public, non-static.</item>
                        <item>The method should take only one input parameter of type <strong>com.thoughtworks.go.plugin.api.info.PluginContext</strong>.
                            Return values will be ignored..</item>
                        <item>These annotations will not be inherited along with the method.</item>
                        <item>There should be atmost one method with the annotation.</item>
                    </bullets>
            An example callback is shown below
            <code>
                @UnLoad
                public void onUnload(PluginContext context) {
                    System.out.println("Plugin unloaded");
                }
            </code>

            @Unload annotation will be validated for the above expectations at the load time of plugin but will be invoked only at the unload time.
            The rationale behind this validation is that load callback will not be invoked if the unload callback is bound to fail.
                </subsection>

    </section>
    <section title="Plugin Environment">
        <subsection title="Logging">
           <p>
               Every plugin is provided with a <exref url="resources/javadoc/com/thoughtworks/go/plugin/api/logging/Logger.html" target="_blank">com.thoughtworks.go.plugin.api.logging.Logger</exref> that can be used by the plugins.
               API documentation provides more details on the functionality.
           </p>
           <p>
               Each plugin will have a separate log file corresponding to it. The log file name is of the format <strong>plugin-<i>plugin-id</i>.log</strong>
               The plugin log files will be in the same directory as the Go server log.
           </p>
           <p>
            The default logging level for the plugin is set to INFO. User can override default value by setting system property <strong>'plugin.pluginId_placeholder.log.level'</strong> to required logging level. For example, to set the logging level
            to WARN for plugin with id 'yum-poller', system property <strong>'plugin.yum-poller.log.level'</strong> should be set to WARN.
           </p>
        </subsection>
    </section>
</chapter>
