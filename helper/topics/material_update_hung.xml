<?xml version="1.0"?>
<!-- *************************GO-LICENSE-START******************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<!DOCTYPE chapter SYSTEM "cruise_help.dtd">
<chapter title="Go unable to poll for changes">
    <p>
        <item>Go server polls for changes to all materials of 'Auto Triggered' pipelines. By default, polling occurs every minute and ten materials at a time. The polling interval and the number of materials to be polled simultaneously are configurable.</item>
        <item>Go uses SCM commands to poll for changes. For example, to check for any new changes in SVN repository the following command is used: <code>svn log --non-interactive --xml -v -r HEAD:'revision' 'repository-URL'</code></item>
        <item>The SCM command used by Go server can hang with no output. Invalid configuration, network issues, console input block are some of the causes for such a situation.
        Such scenarios cause pipeline scheduling delays and also lead to performance degradation</item>
       <item>Such a scenario is notified to the users by a warning in Server Health; when clicked shows a message similar to the one below.</item>
   </p>

  <img src="resources/images/cruise/material_update_hung.png" />

  <section title="What can I do with the information">
      <p>When you see warning messages like the one above</p>
	<bullets>
	    <item>Identify the processes running as children of Go Server </item>
		<note>On Windows, you can use tools like <strong>Process Explorer</strong>. On linux you could run 'ps waux | grep 'material-type'' </note>
            <item>Determine the process that's hung. The extra information like URL: "https://test@bitbucket.org/test/git_repo.git" in the warning information should help you with this.  </item>
            <item>On linux system, you should see lines like these:</item>
	    <code>go 31201 1  0 Feb07 ?  00:00:00 git clone https://test@bitbucket.org/test/git_repo.git /var/lib/cruise-server/pipelines/flyweight/b9ec0885-eb32-458c-bd6b-eeefe3ef9816</code>
             <item>Kill the process and all its children (the whole process tree). </item>
	     <item>Ensure that the warning message goes away from Server Health.</item>
        <warning>
            Please note the folder name (of the form <strong>.../flyweight/b9ec0885-eb32-458c-bd6b-eeefe3ef9816</strong>) present in the OS process listing.
            This folder was being used by the polling command. Locate the folder in the Go installation and delete it if it exists.
            This ensures that the kill of the process tree has not left behind any inconsistent information.
        </warning>
	</bullets>
  </section>

  <section title="Configuring warning time">
	<bullets>
        <item>Go server waits for 15 minutes (of no output) before it warns user about possible hung material update.
            User can modify this wait time using a System Property: 'material.update.inactive.timeout'.</item>
	<item>On linux installations of Go server, add the following line to /etc/default/go-server. 
	    <code>export GO_SERVER_SYSTEM_PROPERTIES='-Dmaterial.update.inactive.timeout=20'</code>
	    The above configuration sets the time that Go server uses to determine if a material update is possibly hung, to 20 minutes.
        </item>
        <item>On Windows, add the following line in the <i><cref topic="installing_go_server">wrapper-properties.conf</cref></i> file in the config folder of the Go server installation where <strong>x</strong> is 1 more than the highest number in <i>wrapper-server.conf</i> and <i>wrapper-properties.conf</i> combined.
	    <code>wrapper.java.additional.x='-Dmaterial.update.inactive.timeout=20'</code>
	    The above configuration sets the time that Go server uses to determine if a material update is possibly hung, to 20 minutes.
        </item>
	</bullets>
  </section>
</chapter>
