<?xml version="1.0"?>
<!-- *************************GO-LICENSE-START******************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<!DOCTYPE chapter SYSTEM "cruise_help.dtd">
<chapter title="Yum Repository Poller">
    <note>
        <strong>Note:</strong> This plugin is available for Go servers running on Linux nodes having repoquery installed (part of the <exref
            url="http://linux.die.net/man/1/yum-utils">yum-utils</exref> package. <exref
            url="http://manpages.ubuntu.com/manpages/raring/man1/yum-utils.1.html">Ubuntu</exref>, <exref
            url="http://rpmfind.net//linux/RPM/centos/6.4/i386/Packages/yum-utils-1.1.30-14.el6.noarch.html">CentOS</exref> )
    </note>
    <section title="Introduction">
        The Yum respository poller is a bundled <cref topic="package_material">package material</cref> plugin capable of polling yum repositories for rpm
        packages. Go server interacts with this plugin via package material plugin interfaces. The plugin makes use of a
        command similar to the following to poll the server. So it does not depend on the files that yum depends on e.g.
        files under /etc/yum.repos.d
        <code>
            <![CDATA[repoquery --repofrompath=uuid,$REPO_URL --repoid=uuid -q $PACKAGE_SPEC -qf "%{LOCATION}..."]]>
        </code>
        A given instance of polling is considered successful if repoquery returns a single package as output.
    </section>
    <section title="Turn your Maven Nexus Repo into a Yum repo">
        Using the <exref url="https://github.com/sonatype/nexus-yum-plugin">Yum plugin for Nexus</exref>, it is possible to automatically create and publish Java artifacts as rpms using the <exref url="http://mojo.codehaus.org/rpm-maven-plugin/index.html">rpm-maven-plugin</exref> and consume them on the deployment side using rpm or yum. There is a <exref url="http://www.youtube.com/watch?v=hFRd_8mbIXI">Go webinar</exref> that describes this set up.
    </section>
    <section title="Repository definition" id="repodefn">
        Repo URL must be a valid http, https or file URL. This plugin looks for the presence of
        <strong>$REPO_URL/repodata/<exref url="http://createrepo.baseurl.org/wiki">repomd.xml</exref></strong>
        to ascertain validity. Basic authentication (user:password@domain/path) is supported for http and https
        repositories.
    </section>
    <section title="Package definition" id="pkgdefn">
        In case of this plugin, the package definition is completely determined by the package spec. The package spec
        may be in any of the following formats. Please refer the <exref url="http://linux.die.net/man/1/repoquery">repoquery man page</exref>
        for details.
        <code>
            <![CDATA[
                name
                name.arch
                name-ver
                name-ver-rel
                name-ver-rel.arch
                name-epoch:ver-rel.arch
                epoch:name-ver-rel.arch]]>
        </code>
<exref url="http://linux.die.net/man/7/glob">Shell glob patterns</exref> may also be used. For example, say we have a component under development getting ready for release of version 1.2.0. We cut a branch for the release and bump up the version on trunk/master to 1.3.0. Thus, a package generated by trunk/master may look like mycomp-1.3.0-b72349-noarch.rpm while that generated by branch may look like mycomp-1.2.0-b72344-noarch.rpm. Now if we have a deployment pipeline that is only interested in 1.2 series packages, the package spec needs to be mycomp-1.2.* rather than just mycomp
    </section>
    <section title="Package Metadata" id="pkgmeta">
        The following <exref url="http://www.rpm.org/max-rpm-snapshot/s1-rpm-inside-tags.html">rpm metadata</exref> is accessed by the plugin
        <steps>
            <item>BuildTime (required, automatically set by rpmbuild) - Used by the plugin to validate if the package is newer than what was last seen by Go. Go displays this field as <i>Modified On</i>.
            </item>
            <item>Packager - Go displays this field as <i>Modified By</i>. If not provided, it is shown as anonymous</item>
            <item>URL - Displayed as a <i>Trackback URL</i> by Go. <strong>Use this as a means to trace back to the job that published the package</strong> (within Go or outside) to the yum repository.
            </item>
            <item>BuildHost - Displayed by Go as <i>Comment: Built on $BUILDHOST</i></item>
        </steps>
    </section>
    <section title="Published Environment Variables" id="envvar">
        The following information is made available as environment variables for tasks:
        <steps>
            <item>GO_PACKAGE_&lt;REPO-NAME&gt;_&lt;PACKAGE-NAME&gt;_LABEL</item>
            <item>GO_REPO_&lt;REPO-NAME&gt;_&lt;PACKAGE-NAME&gt;_REPO_URL</item>
            <item>GO_PACKAGE_&lt;REPO-NAME&gt;_&lt;PACKAGE-NAME&gt;_PACKAGE_SPEC</item>
            <item>GO_PACKAGE_&lt;REPO-NAME&gt;_&lt;PACKAGE-NAME&gt;_LOCATION</item>
        </steps>
        Individual plugins may provide additional info via additional environment variables.
    </section>
    <section title="Downloading RPMs" id="download">
            Let's say we set up a repository named ORA pointing to
            http://public-yum.oracle.com/repo/OracleLinux/OL6/latest/x86_64 and define a package gcc with a spec of
            gcc-4.* and set it up as material for a pipeline. To download the package locally on the agent, we could
            write a task like this:
        <code>
            <![CDATA[
                [go] Start to execute task: <exec command="/bin/bash" >
                <arg>-c</arg>
                <arg>curl -o /tmp/gcc.rpm $GO_PACKAGE_ORA_GCC_LOCATION</arg>
                </exec>]]>
        </code>
        <p>When the task executes on the agent, the environment variables get subsituted as below:</p>
        <code>
        <![CDATA[
            [go] Start to execute task: <exec command="/bin/bash" >
            <arg>-c</arg>
            <arg>curl -o /tmp/$GO_PACKAGE_ORA_GCC_LABEL.rpm $GO_PACKAGE_ORA_GCC_LOCATION</arg>
            </exec>.
            ...
            [go] setting environment variable 'GO_PACKAGE_ORA_GCC_LABEL' to value 'gcc-4.4.7-3.el6.x86_64'
            [go] setting environment variable 'GO_REPO_ORA_GCC_REPO_URL' to value 'http://public-yum.oracle.com/repo/OracleLinux/OL6/latest/x86_64'
            [go] setting environment variable 'GO_PACKAGE_ORA_GCC_PACKAGE_SPEC' to value 'gcc-4.*'
            [go] setting environment variable 'GO_PACKAGE_ORA_GCC_LOCATION' to value 'http://public-yum.oracle.com/repo/OracleLinux/OL6/latest/x86_64/getPackage/gcc-4.4.7-3.el6.x86_64.rpm'
            ...]]>
        </code>
        <p>Or, to simply pass it as an argument to a deploy script on a remote server</p>
        <code>
            <![CDATA[
                <exec command="/bin/bash">
                    <arg>-c</arg>
                    <arg>ssh server "cd /to/dest/dir;deploy.sh $GO_PACKAGE_ORA_GCC_LOCATION"</arg>
                </exec>]]>
        </code>
    </section>
    <section title="Installing RPMs" id="install">
        For self contained packages (no external dependencies other than what is already installed on the target node), it is just enough to do:
        <code>
            <![CDATA[
                rpm -U /path/to/downloaded/pkg.rpm]]>
        </code>
        <p>On the other hand, if the package isn't self-contained, we'd run:</p>
        <code>
            <![CDATA[
                yum install $GO_PACKAGE_ORA_GCC_LABEL]]>
        </code>
        <p>This would require that /etc/yum.repos.d contain the repository definitions.</p>
    </section>
    <section title="Creating and Publishing RPMs" id="create">
        Although the support for package as material in Go isn't concerned with how the packages are created and published, here is a short set of pointers to information on the web.
        <bullets>
            <item><exref url="http://www.ibm.com/developerworks/library/l-rpm1/#first_rpm">Building an RPM using rpmbuild and SPEC file</exref> </item>
            <item><exref url="https://github.com/jordansissel/fpm/wiki">Building using fpm</exref></item>
            <item><exref url="http://www.howtoforge.com/creating_a_local_yum_repository_centos">Tutorial</exref> to set up a local yum repository using <exref url="http://linux.die.net/man/8/createrepo">createrepo</exref>. Publishing to a yum repo simply involves uploading/copying over a new package revision at the correct location and running createrepo --update</item>
        </bullets>
    </section>
    <section title="Notes" id="note">
        <steps>
            <item>This plugin will detect at max one package revision per minute (the default interval at which Go materials
        poll). If multiple versions of a package get published to a repo in the time interval between two polls, Go will
        only register the latest version in that interval.</item>
         <item>This plugin makes use of buildtime in rpm metadata to determine if a poll has returned a new result. If for some reason (e.g. timezone misconfiguration), the
        buildtime of pkg-1.1 is less than that of pkg-1.0, then the plugin will not register pkg-1.1 as a newer package.</item>
		<item>The only way to update an rpm is to change the version or release. <exref url="http://unix.stackexchange.com/questions/71288/does-yum-use-package-buildtime-to-decide-if-a-package-is-newer">Republishing</exref> a different file with the same name and different buildtime won't do.</item>
		<item>Package groups are not supported.</item>
		<item>The <exref url="https://github.com/gocd/go-command-repo/tree/master/package/rpm">Go command repository</exref> has a bunch of commands related to rpm packages.</item>
        </steps>
    </section>
</chapter>