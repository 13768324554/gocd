<?xml version="1.0"?>
<!-- *************************GO-LICENSE-START******************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<!DOCTYPE chapter SYSTEM "cruise_help.dtd">
<chapter title="Releasing into an environment">
  <p>One of the most useful aspects of having your build mapped as a pipeline, is being able to know exactly what is in a particular environment. For example, you might have a User Acceptance Testing environment into which you want Go to automatically deploy your binary. Due to process restriction within your company, you might want to manually install a binary yourself, but have Go still retain the information of what is currently released.</p>
  <section title="Example usages">
    <subsection title="Automatically deploy to UAT" id="deploy_uat">
      <p>For this example, we'll assume that there is already an ant task defined in your build that will take a binary and deploy it to your environment. A seperate task will verify the install was successful. If it is not, a task will run to rollback the deployment. We will also assume that earlier in the pipeline there is a <strong>dist</strong> stage with a <strong>create-installers</strong> job that will have already created the binary for us to use.</p>
      <bullets>
        <item><cref topic="admin_add_stage">Add a new stage</cref> named <strong>UAT</strong> with a job named <strong>deploy</strong></item>
        <item><cref topic="dev_choose_when_stage_runs">Ensure that the <strong>UAT</strong>stage is manual</cref></item>
        <item>Ensure the following task block is in the <strong>deploy</strong> job configuration</item>
        <code>&lt;tasks&gt;
  &lt;fetchartifact stage="dist" job="create-installers" srcdir="pkg" dest="installers" /&gt;
  &lt;ant target="deploy_to_uat" /&gt;
  &lt;ant target="verify_uat_works_correctly" /&gt;
  &lt;ant target="rollback_to_previous_install_in_uat"&gt;
    &lt;runif status="failed" /&gt;
  &lt;/ant&gt;
&lt;/tasks&gt;</code>
      </bullets>
      <p>When you are ready to deploy something into the UAT environment...</p>
      <bullets>
        <item>Navigate to the <cref topic="pipeline_activity_page">pipeline activity</cref> page</item>
        <item>Find the check-in you want to deploy</item>
        <item>Click on the  manual transition into the <strong>UAT</strong> stage</item>
        <img src="resources/images/cruise/release_manager/release_to_production/1_click_manual_to_uat.png" />
        <item>When the deploy is successful, the stage will be green and the UAT environment will contain the selected check-in</item>
        <img src="resources/images/cruise/release_manager/release_to_production/2_successful_to_uat.png" />
        <item>When the deploy fails for some reason, the stage will be red and the UAT environment will contain the original check-in</item>
        <img src="resources/images/cruise/release_manager/release_to_production/3_failure_to_uat.png" />
      </bullets>
    </subsection>
    <subsection title="Manually deploy to production" id="deploy_prod">
      <p>For this example, we'll assume that there is a known way to rollback to a previous installation. We will also assume that earlier in the pipeline there is a <strong>dist</strong> stage with a <strong>create-installers</strong> job that will have already created the binary for us to use.</p>
      <bullets>
        <item><cref topic="admin_add_stage">Add a new stage</cref> named <strong>production</strong> with a job named <strong>deploy</strong></item>
        <item><cref topic="dev_choose_when_stage_runs">Ensure that the <strong>production</strong>stage is manual</cref></item>
        <item>Ensure there is no task block in the <strong>deploy</strong> job configuration</item>
      </bullets>
      <p>When you are ready to deploy something into the production environment...</p>
      <bullets>
        <item>Navigate to the <cref topic="pipeline_activity_page">pipeline activity</cref> page</item>
        <item>Find the check-in you want to deploy</item>
        <item>Click on the details link of the <strong>dist</strong> stage</item>
        <img src="resources/images/cruise/release_manager/release_to_production/4_click_stage_details.png" />
        <item>Download the installer binary in the artifacts tab</item>
        <img src="resources/images/cruise/release_manager/release_to_production/5_download_artifact.png" />
        <item>Manually install the binary into production</item>
        <item>If there are issues, manually rollback to the last known good installation</item>
        <item>If everything seems to be working correctly, click on the  manual transition into the <strong>production</strong> stage</item>
        <img src="resources/images/cruise/release_manager/release_to_production/6_click_manual_to_prod.png" />
      </bullets>
    </subsection>
  </section>
</chapter>
