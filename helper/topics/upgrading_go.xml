<?xml version="1.0"?>
<!-- *************************GO-LICENSE-START******************************
 * Copyright 2014 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<!DOCTYPE chapter SYSTEM "mingle_help.dtd">
<chapter title="Upgrading Go">
	<section title="Introduction">
		<p>To upgrade from a previous version of Go, it is only necessary to upgrade the Server. It is not necessary to stop or backup the Go Agents. Agents will automatically update to the correct version of Go.</p>
		<section title="Before you start">
			<p>Since Cruise 1.1 (legacy version of Go), we do not include a bundled version of the Subversion version control system.
                This means that if you use Subversion for your projects the server and all agents need to have Subversion installed and available on the system path.</p>
			<p>Since Cruise 1.2 (legacy version of Go), we do not include a bundled version of ANT.
                This means that if you use ANT for your projects the server and all agents need to have ANT installed and available on the system path.</p>
		</section>
	</section>
	<section title="Backing up your data">
		<subsection title="Configuration Backup">
            <p>
                As part of the configuration two files need to be backed up:
                <bullets>
                     <item>Go's configuration is saved in the <strong>cruise-config.xml</strong> file</item>
                     <item>Cipher file for password encryption.</item>
                </bullets>
                Based on the OS your Go server is running on, both these files can be found at:
            </p>
            <table>
                <header-row>
                    <col-header>Operating System</col-header>
                    <col-header>Location</col-header>
                </header-row>

                <row>
                    <label>Linux</label>
                    <col>/etc/go</col>
                </row>
                <row>
                    <label>Windows</label>
                    <col>[Go install directory]\config</col>
                </row>
                <row>
                    <label>Mac OS X</label>
                    <col>&lt;user-home&gt;/Library/Application Support/Go Server</col>
                </row>
            </table>
		</subsection>
		<subsection title="Database backup">
            <p>
                It is critical that the Go server be stopped before taking a backup of the database. If the Go server is not
                stopped, the backup may be corrupted. The database directory will be located at any one of the following
                locations based on what OS you're running on:
            </p>
            <table>
                <header-row>
                    <col-header>Operating System</col-header>
                    <col-header>Location</col-header>
                </header-row>

                <row>
                    <label>Linux</label>
                    <col>/var/lib/go-server/db</col>
                </row>
                <row>
                    <label>Windows</label>
                    <col>[Go install directory]\db</col>
                </row>
                <row>
                    <label>Mac OS X</label>
                    <col>&lt;user-home&gt;/Library/Application Support/Go Server/db</col>
                </row>
            </table>
		</subsection>
		<subsection title="Build Artifacts Backup">
            <p>
                The Go server acts as a repository for all your build artifacts. While it is not essential to backup the
                artifacts before an upgrade, it is good practice to make regular backups of this directory.
            </p>
            <p>
                You can configure where Go stores build artifacts. The following are the default locations of the artifacts
                if you have not customized its location:
            </p>
            <table>
                <header-row>
                    <col-header>Operating System</col-header>
                    <col-header>Location</col-header>
                </header-row>

                <row>
                    <label>Linux</label>
                    <col>/var/lib/go-server/artifacts</col>
                </row>
                <row>
                    <label>Windows</label>
                    <col>[Go install directory]\artifacts</col>
                </row>
                <row>
                    <label>Mac OS X</label>
                    <col>&lt;user-home&gt;/Library/Application Support/Go Server/artifacts</col>
                </row>
            </table>
		</subsection>
	</section>
	<section title="Upgrading to the new version">
		<p>You do not need to stop the Agents to perform an upgrade. Go agents will automatically update to the correct version of the software. You do not need to upgrade the Go agents. Any builds in progress will be rescheduled, and the existing pipelines will complete as expected.</p>

        <note>If you are upgrading from a pre-2.1 release, the agent's directory structure will continue to be called "cruise-agent" and will not be renamed to "go-agent". This is normal and will not cause any issues.</note>
<note> On linux, you can ignore any permission errors logged as part of the upgrade of the cruise agent from a pre-2.1 release</note>

		<p>Go will perform upgrades of its internal data structures when it starts. This process may take some time for installations with a large number of historical builds (10 to 15 minutes on very large installations). If you suspect that there is a problem with the upgrade, check the go-server.log to see if there are any reported errors. This is a one-time migration and subsequent restarts will be much faster.</p>
		<subsection title="Windows" collapsed="true">
			<p>Run the Go installer. Make sure that you specify the same directory as your previously installed version.</p>
			<p>If you have changed the Go Server Windows service to run as a different user, you will need to repeat this configuration change.</p>
			<p>The installer will automatically start the service. Once Go completes its internal data changes, you should be able to see the Go webpage. Any existing Agents should automatically reconnect. Any builds in progress should continue, or be rescheduled.</p>
		</subsection>
		<subsection title="Linux" collapsed="true">
             <subsection title="Debian based distributions (i.e. Ubuntu)" collapsed="false">
                <p>Run the Go installer as described 'sudo dpkg -i [go-server-package-name]'.</p>
            </subsection>

            <subsection title="RPM based distributions (i.e. RedHat)" collapsed="false">
                <p>Run the Go installer as described 'sudo rpm  -U [go-server-package-name]'.</p>
            </subsection>
		</subsection>
		<subsection title="Macintosh OSX" collapsed="true">
			<p>The Macintosh OSX edition of Go does not support upgrades. You should follow the steps above to backup your data, uninstall Go/Cruise (by dragging the application into trash), and then perform a fresh installation.</p>
		</subsection>
		<subsection title="Solaris" collapsed="true">
			<p>The Solaris edition of Go does not support upgrades. You should follow the steps above to backup your data, uninstall Go/Cruise, and then perform a fresh installation.</p>
		</subsection>
	</section>
	<section title="Notes">
		<p>Use the notes from this section when upgrading to a particular version of Go.</p>
		<subsection title="Version 2.3" collapsed="true">
			<p>As part of the 2.3 upgrade, the "dest" attribute of a material configured in a pipeline is case-insensitive. This would mean that if you have a pipeline P1 with two materials, say material M1 with dest = "foo" and material M2 with dest = "Foo", after the upgrade the dest folders will be automatically changed to M1 (dest = "foo_(random_string)") and M2 (dest = "Foo_(random_string)")</p>
		</subsection>
	</section>

</chapter>
