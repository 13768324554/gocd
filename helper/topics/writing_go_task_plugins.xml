<chapter title="Writing a task plugin">
  <section title="Overview">
    <p>
      Go supports configuring a few kinds of tasks (Nant, Ant and Rake), directly, from the configuration UI, without
      specifying them as a custom command. For instance, if you go to the configuration UI for a job, you'll see something
      like this:
    </p>

    <img alt="Non-plugin tasks dropdown" src="resources/images/cruise/task_plugin/1_Without_Curl.png" />

    <p>
      A task plugin allows you to extend this so that you can have other tasks available here. The plugin also allows you to
      control the UI, as well as the data stored for this task.
    </p>

    <p>
      For instance, you can find the source of a sample Curl plugin, <cref topic="go_plugins_basics"
      anchor="building_a_plugin">at this location</cref>. Assuming you have the plugin installed, you'll see that the
      dropdown in the job configuration UI has changed to look like this:
    </p>

    <img alt="Dropdown with plugin tasks included" src="resources/images/cruise/task_plugin/2_With_Curl.png" />

    <p>
      When selected, the dialog box which allows you to configure details about the task looks like this:
    </p>

    <img alt="Plugin configuration form" src="resources/images/cruise/task_plugin/3_Curl_Form.png" />

    <p>
      In the configuration XML, the information entered for this task looks like this:
    </p>

    <code>
&lt;task&gt;
  &lt;pluginConfiguration id="curl.task.plugin" version="1" /&gt;
  &lt;configuration&gt;
    &lt;property&gt;
      &lt;key&gt;Url&lt;/key&gt;
      &lt;value&gt;http://www.google.com&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;key&gt;SecureConnection&lt;/key&gt;
      &lt;value&gt;no&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;key&gt;RequestType&lt;/key&gt;
      &lt;value&gt;-G&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
      &lt;key&gt;AdditionalOptions&lt;/key&gt;
      &lt;value /&gt;
    &lt;/property&gt;
  &lt;/configuration&gt;
  &lt;runif status="passed" /&gt;
&lt;/task&gt;</code>

    <p>
      When a build which uses the plugin runs, the output of the build looks something like this:
    </p>

    <code>
[go] Start to execute task: Plugin with ID: curl.task.plugin.
Launching command: [curl, -G, --insecure, -o, pipelines/up42/index.txt, http://www.google.com]
Environment variables:
Name= MAVEN_OPTS  Value= -Xms256m -Xmx512m
Name= GO_STAGE_COUNTER  Value= 1
Name= GO_REVISION_BLAH  Value= cde1e03a05170b991a92a136278c3464e4f35fe7
Name= GO_JOB_NAME  Value= up42_job
Name= EDITOR  Value= vim
Name= SECURITYSESSIONID  Value= 186a4
... lots more environment variables ...
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Dload  Upload   Total   Spent    Left  Speed

0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
0     0    0     0    0     0      0      0 --:--:--  0:00:02 --:--:--     0
100   259  100   259    0     0    122      0  0:00:02  0:00:02 --:--:--   122</code>

    <p>
      The objective of this guide is to explain how to write such a task plugin, for Go.
    </p>
  </section>

  <section title="Interface">
    <p>
      Creating a task plugin involves implementing a few interfaces, which are described below. If you need to know the basics
      of writing a plugin in Go, read <cref topic="go_plugins_basics">this</cref>. The concepts and processes mentioned
      there apply to the task plugin end-point as well. On that page, you can also find the go-plugin-api.jar file which
      contains the interfaces mentioned below.
    </p>

    <subsection title="Task">
      <p>
        The Task interface is the starting point of the task plugin end-point. It is the top-level interface that needs to be
        implemented. However, to implement the methods in it, you will need to be aware of a few other interfaces and classes.
      </p>

      <img alt="Task interface" src="resources/images/cruise/task_plugin/Task.png" />
    </subsection>

    <subsection title="TaskConfig">
      <p>
        TaskConfig is a class, which is used by the plugin to define the set of configuration properties accepted and expected
        by it.
      </p>

      <img alt="TaskConfig interface" src="resources/images/cruise/task_plugin/TaskConfig.png" />

      <p>
        As shown above, it has an addProperty method, which is usually used to
        add information about a configuration property. You can also provide a
        default value for a property. It will be used if the user does not
        provide any value for it. It can be setup this way (inside the config()
        method of your plugin's task implementation):
      </p>

      <code>config.addProperty("MyProperty).withDefault("DEFAULT VALUE");</code>
    </subsection>

    <subsection title="TaskView">
      <p>
        The TaskView implementation provided by the plugin defines the UI part of the configuration. The template() method
        returns a string, which is written in HTML with Angular.js-specific elements. Every configuration property specified by
        the TaskConfig mentioned earlier, will be available as a variable, which can be used in the template.
      </p>

      <img alt="TaskView interface" src="resources/images/cruise/task_plugin/TaskView.png" />

      <p>
        You can read more about Go's use of Angular.js templates <cref topic="angular-js-templates-in-go-plugins">here</cref>.
      </p>
    </subsection>

    <subsection title="TaskExecutor">
      <p>
        The TaskExecutor implementation provided by the plugin (and its execute() method, actually) is the one that gets called,
        on an agent, when the plugin task needs to be executed.
      </p>

      <img alt="TaskExecutor interface" src="resources/images/cruise/task_plugin/TaskExecutor.png" />

      <p>
        The execute() method gets called with two arguments:
      </p>

      <bullets>
        <item>
          TaskConfig: This TaskConfig object is related to the one specified in the config() method in the Task Interface,
          but differs in that it contains the value of the property, specified by the user, as well.
        </item>

        <item>
          TaskExecutionContext: This object contains contextual information related to this run of the task. It is explained in
          a bit more detail below.
        </item>
      </bullets>
    </subsection>

    <subsection title="TaskExecutionContext">
      <p>
        The TaskExecutionContext is provided by Go, when the execute() method of TaskExecutor is called on the agent, when a
        task needs to be run.
      </p>

      <img alt="TaskExecutionContext interface" src="resources/images/cruise/task_plugin/TaskExecutionContext.png" />
    </subsection>
  </section>

  <section title="Writing a simple task plugin">
    <p>
      You can find the source of the sample Curl plugin mentioned earlier, <cref topic="go_plugins_basics" anchor="building_a_plugin">at this location</cref>.
    </p>

    <p>
      Let's see what it takes to implement a simple task plugin, one which takes a message from the user, and when executed,
      echoes that message back. We need to start with a Task interface implementation, with the config() method specifying the
      "message" field and the view() method specifying a UI for it. Do not forget to annotate the class with @Extension
      annotation, as specified in the <cref topic="go_plugins_basics">Go plugin basics page</cref>.
    </p>

    <subsection title="Version 1 - No validation">
      <p>
        For version 1 of this plugin, we will ignore the validate() method. The code looks like this:
      </p>

      <code>
import com.thoughtworks.go.plugin.api.annotation.Extension;
import com.thoughtworks.go.plugin.api.response.execution.ExecutionResult;
import com.thoughtworks.go.plugin.api.response.validation.ValidationResult;
import com.thoughtworks.go.plugin.api.task.*;

@Extension
public class EchoTask implements Task {
  private static final String MESSAGE_KEY = "message";

  @Override
  public TaskConfig config() {
    TaskConfig config = new TaskConfig();
    config.addProperty(MESSAGE_KEY).withDefault("NO MESSAGE");
    return config;
  }

  @Override
  public TaskView view() {
    return new TaskView() {
      @Override
      public String displayValue() {
        return "Echo";
      }

      @Override
      public String template() {
        return "&lt;div class=\"form_item_block\"&gt;\n" +
                "  &lt;label&gt;Message:&lt;span class=\"asterisk\"&gt;*&lt;/span&gt;\n" +
                "      &lt;input type=\"text\" ng-model=\"" + MESSAGE_KEY + "\" ng-required=\"true\"&gt;\n" +
                "  &lt;/label&gt;\n" +
                "&lt;/div&gt;\n";
      }
    };
  }

  @Override
  public ValidationResult validate(TaskConfig configuration) {
    return new ValidationResult(); // No errors added to it.
  }

  @Override
  public TaskExecutor executor() {
    return new TaskExecutor() {
        @Override
        public ExecutionResult execute(TaskConfig config, TaskExecutionContext context) {
          context.console().printLine("Message is: " + config.getValue(MESSAGE_KEY));
          return ExecutionResult.success("Finished running echo plugin!");
        }
    };
  }
}</code>

      <p>
        Now, the dropdown and configuration UI look like this:
      </p>

      <img alt="Echo task" src="resources/images/cruise/task_plugin/EchoTask.png" />

      <p>
        The output of the task, when it runs, looks like this:
      </p>

      <code>
[go] Start to execute task: Plugin with ID: echo.task.plugin.
Message is: Test</code>
    </subsection>

    <subsection title="Version 2 - With validation">

      <p>
        Let's add a validation to the save, so that only messages with length 5 are allowed. To do this, we need to add a
        validation error when a message which is not of length 5 is entered. Also, we need to change the template so that it can
        show an error. The code looks like this:
      </p>

      <code>
import com.thoughtworks.go.plugin.api.annotation.Extension;
import com.thoughtworks.go.plugin.api.response.execution.ExecutionResult;
import com.thoughtworks.go.plugin.api.response.validation.ValidationError;
import com.thoughtworks.go.plugin.api.response.validation.ValidationResult;
import com.thoughtworks.go.plugin.api.task.*;

@Extension
public class EchoTask implements Task {
  private static final String MESSAGE_KEY = "message";

  @Override
  public TaskConfig config() {
    TaskConfig config = new TaskConfig();
    config.addProperty(MESSAGE_KEY).withDefault("NO MESSAGE");
    return config;
  }

  @Override
  public TaskView view() {
    return new TaskView() {
      @Override
      public String displayValue() {
        return "Echo";
      }

      @Override
      public String template() {
        return "&lt;div class='form_item_block'&gt;\n" +
            "  &lt;label&gt;Message:&lt;span class='asterisk'&gt;*&lt;/span&gt;&lt;/label&gt;\n" +
            "    &lt;input type='text' ng-model='" + MESSAGE_KEY + "' /&gt;\n" +
            "    &lt;span class=\"form_error\" ng-show=\"GOINPUTNAME[" + MESSAGE_KEY + "].$error.server\"&gt;{{ GOINPUTNAME[" + MESSAGE_KEY + "].$error.server }}&lt;/span&gt;\n" +
            "&lt;/div&gt;\n";
      }
    };
  }

  @Override
  public ValidationResult validate(TaskConfig configuration) {
    ValidationResult result = new ValidationResult();

    String message = configuration.getValue(MESSAGE_KEY);
    if (message == null || message.length() != 5) {
      result.addError(new ValidationError(MESSAGE_KEY, "Only messages of length 5 allowed."));
    }

    return result;
  }

  @Override
  public TaskExecutor executor() {
    return new TaskExecutor() {
      @Override
      public ExecutionResult execute(TaskConfig config, TaskExecutionContext context) {
        context.console().printLine("Message is: " + config.getValue(MESSAGE_KEY));
        return ExecutionResult.success("Finished running echo plugin!");
      }
    };
  }
}</code>

      <p>
        Now, the configuration UI looks like this, when trying to save a message which is not of length 5:
      </p>

      <img alt="Echo task - Validation error" src="resources/images/cruise/task_plugin/EchoTaskSaveError.png" />
    </subsection>
  </section>
</chapter>
