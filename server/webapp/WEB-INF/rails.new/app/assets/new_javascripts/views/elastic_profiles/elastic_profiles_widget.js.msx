/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'string-plus', 'helpers/form_helper', 'views/shared/new_modal', 'helpers/mithril_component_mixins',
  'models/elastic_profiles/elastic_profiles',
  'models/pipeline_configs/plugin_infos',
  'views/elastic_profiles/elastic_profile_widget',
  'views/elastic_profiles/elastic_profile_modal_body',
  'jquery.textcomplete'
], function (m, _, s, f, Modal, ComponentMixins, ElasticProfiles, PluginInfos, ElasticProfileWidget, ElasticProfileModalBody) {

  function showErrors(modal, ctrl, newProfile) {
    return function (errorMessageOrProfileWithErrors) {
      if (_.isString(errorMessageOrProfileWithErrors)) {
        modal.destroy();
        ctrl.message({type: 'alert', message: errorMessageOrProfileWithErrors});
      } else {
        ctrl.clearMessage();
        newProfile(errorMessageOrProfileWithErrors);
      }
    };
  }

  function showSuccess(modal, ctrl, message) {
    return function () {
      modal.destroy();
      ctrl.reloadPage();
      ctrl.message({
        type:    'success',
        message: message
      });
    };
  }

  var ElasticProfilesWidget = {
    controller: function () {
      var ctrl = this;
      ComponentMixins.ManagesCollection.call(this, {as: 'Profile'});
      ComponentMixins.HasViewModel.call(this);

      this.modal    = null;
      this.profiles = m.prop(new ElasticProfiles());

      this.message = m.prop({type: undefined, message: undefined});

      this.clearMessage = function () {
        this.message({});
      };

      this.reloadPage = function () {
        ElasticProfiles.all().then(function (profiles) {
          ctrl.profiles(profiles);
        }, function (message) {
          ctrl.message({type: 'alert', message: message});
        });
      };

      this.reloadPage();

      this.edit = function (profile) {
        var showModal = function (args) {
          var newProfile   = m.prop(args[0]);
          var pluginInfo   = m.prop(args[1]);
          var saveDisabled = m.prop(false);
          ctrl.clearMessage();

          var modal = new Modal({
            size:    'large',
            title:   'Edit profile ' + newProfile().id(),
            body:    (<ElasticProfileModalBody profile={newProfile}
                                               pluginInfo={pluginInfo}
                                               newProfile={false}
                                               saveDisabled={saveDisabled}/>),
            onclose: function () {
              modal.destroy();
            },
            buttons: [
              {
                text:     'Save',
                class:    'save primary',
                onclick:  function () {
                  newProfile().update().then(showSuccess(modal, ctrl, 'The profile ' + newProfile().id() + ' was updated successfully.'), showErrors(modal, ctrl, newProfile));
                },
                disabled: saveDisabled
              }
            ]
          });
          modal.render();
        };

        var showError = function (args) {
          var messages = _.chain(args).map(function (arg) {
            if (_.isString(arg)) {
              return s.terminateWithPeriod(arg);
            }
          }).compact().uniq().join(' ').value();

          ctrl.message({type: 'alert', message: messages});
        };

        m.sync([ElasticProfiles.Profile.get(profile.id()), PluginInfos.PluginInfo.get(profile.pluginId())]).then(showModal, showError);
      };

      this.add = function () {
        var newProfile    = m.prop(new ElasticProfiles.Profile({}));
        var newPluginInfo = m.prop(null);
        var saveDisabled  = m.prop(true);

        var modal = new Modal({
          size:    'large',
          title:   'Add a new profile',
          body:    (<ElasticProfileModalBody profile={newProfile}
                                             newProfile={true}
                                             pluginInfo={newPluginInfo}
                                             saveDisabled={saveDisabled}/>),
          onclose: function () {
            modal.destroy();
          },
          buttons: [
            {
              text:     'Save',
              class:    'save primary',
              onclick:  function () {
                newProfile().create().then(showSuccess(modal, ctrl, 'The profile ' + newProfile().id() + ' was created successfully.'), showErrors(modal, ctrl, newProfile));
              },
              disabled: saveDisabled
            }
          ]
        });
        modal.render();
      };

      this.delete = function (profile) {
        var onSuccess = function (message) {
          ctrl.deleteVm(profile.id());
          ctrl.reloadPage();
          ctrl.message({type: 'success', message: message});
        };

        var onFailure = function (message) {
          ctrl.message({type: 'alert', message: message});
        };

        profile.delete().then(onSuccess, onFailure);
      };

    },

    view: function (ctrl) {

      var message;

      if (ctrl.message().message) {
        message = (
          <f.row>
            <f.callout type={ctrl.message().type}>
              {ctrl.message().message}

              <button class="close-button" aria-label="Dismiss alert" type="button"
                      onclick={ctrl.clearMessage.bind(ctrl)}>
                <span aria-hidden="true">&times;</span>
              </button>
            </f.callout>
          </f.row>
        );
      }

      return (
        <div>
          <div class="header-panel">
            <header class="page-header">
              <f.row>
                <f.column size={5}>
                  <h1>Elastic Agent Profiles</h1>
                </f.column>

                <f.column size={7}>
                  <ul class="button-group header-panel-button-group">
                    <li>
                      <f.button onclick={ctrl.add.bind(ctrl)} class="add-profile">
                        Add
                      </f.button>
                    </li>
                  </ul>
                </f.column>
              </f.row>
            </header>
          </div>


          <div class="elastic-profiles">
            {message}
            <f.row>
              {ctrl.profiles().mapProfiles(function (profile) {
                var pluginInfo = _.find(PluginInfos(), function (pi) {
                  return pi.id() === profile.pluginId();
                });

                return (
                  <ElasticProfileWidget
                    profile={profile}
                    pluginInfo={pluginInfo}
                    key={profile.id()}
                    vm={ctrl.vmState(profile.id())}
                    onEdit={ctrl.edit.bind(ctrl, profile)}
                    onDelete={ctrl.delete.bind(ctrl, profile)}/>
                );
              })}
            </f.row>
          </div>
        </div>
      );
    }
  };

  return ElasticProfilesWidget;
});