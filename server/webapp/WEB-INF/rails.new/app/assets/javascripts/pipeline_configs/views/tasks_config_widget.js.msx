/*
 * Copyright 2015 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

define([
  'mithril', 'lodash', 'jquery', 'angular',
  '../helpers/form_helper', '../helpers/dragula_config',
  '../models/tasks', '../models/pluggable_tasks', 'js-routes',
  './lookup_command_widget', '../models/argument',
  '../helpers/mithril_component_mixins'
], function (m, _, $, angular,
             f, dragulaConfig,
             Tasks, PluggableTasks, Routes, LookupCommandWidget, Argument, ComponentMixins) {

  var TaskViews = {
    base: {
      controller: function (args) {
        var self = this;
        self.args = args;
        self.task = args.task;
        var vmStateKey = 'taskEdit' + self.task.uuid();

        ComponentMixins.HasViewModel.call(this);
        self.vmState(vmStateKey, m.prop(self.task.isEmpty() ? true : false));

        this.isEditing = function () {
          return self.vmState(vmStateKey)();
        };

        this.toggleIsEditing = function () {
          var isEditing = self.vmState(vmStateKey)();
          self.vmState('taskEdit' + self.task.uuid())(!isEditing);
        };
      },

      view: function (ctrl, args, children) {
        var classNameForTaskBody = function () {
          return ctrl.isEditing() ? 'show' : 'hide';
        };

        return (
          <div class={'task-definition task-type-' + args.task.type()} data-task-index={args.taskIndex}>
            <div>
              <div class="task-header">
                <span class='task-type'>{args.task.toString()}</span>
                <f.removeButton onclick={args.onRemove} class="remove-task"/>
                <f.editButton class={ctrl.isEditing() ? 'done' : null} onclick={ctrl.toggleIsEditing.bind(ctrl)}/>
              </div>
              <div class={_.compact(["task-body", classNameForTaskBody()]).join(' ')}>{children}</div>
            </div>
          </div>
        );
      }
    },

    ant:  {
      view: function (ctrl, args) {
        var task = args.task;
        return (
          <TaskViews.base {...args}>
            <f.row>
              <f.inputWithLabel attrName='target'
                                model={task}/>
              <f.inputWithLabel attrName='buildFile'
                                model={task}/>
              <f.inputWithLabel attrName='workingDirectory'
                                model={task}
                                end={true}/>
            </f.row>
          </TaskViews.base>
        );
      }
    },
    nant: {
      view: function (ctrl, args) {
        var task = args.task;
        return (
          <TaskViews.base {...args}>
            <f.row>
              <f.inputWithLabel attrName='target'
                                model={task}/>
              <f.inputWithLabel attrName='workingDirectory'
                                model={task}/>
              <f.inputWithLabel attrName='buildFile'
                                model={task}
                                end={true}/>
            </f.row>

            <f.row>
              <f.inputWithLabel attrName='nantPath'
                                model={task}
                                end={true}/>
            </f.row>

          </TaskViews.base>
        );
      }
    },

    exec: {
      view: function (ctrl, args) {
        var task = args.task;
        var vm = Argument.vm(task.args());
        var arguments = function () {
          if (task.args().isList()) {
            return (
              <f.column size={8}>
                <f.textareaWithLabel attrName="data"
                                     model={vm}
                                     label="Args"
                                     size={12}/>
              </f.column>)
          }
          return (
            <f.column size={8}>
              <f.inputWithLabel attrName='data'
                                model={vm}
                                label="Args"
                                size={12}
                                largeSize={12}/>
            </f.column>)
        };

        return (
          <TaskViews.base {...args}>
            <f.row>
              <f.column size={4}>
                <f.row>
                  <f.inputWithLabel attrName='command'
                                    model={task}
                                    size={12}
                                    largeSize={12}/>
                  <f.inputWithLabel attrName='workingDirectory'
                                    model={task}
                                    end={true}
                                    size={12}
                                    largeSize={12}/>
                </f.row>
              </f.column>
              {arguments()}
            </f.row>
            <LookupCommandWidget model={task}/>
          </TaskViews.base>
        );
      }
    },

    rake: {
      view: function (ctrl, args) {
        var task = args.task;
        return (
          <TaskViews.base {...args}>
            <f.row>
              <f.inputWithLabel attrName='target'
                                model={task}/>
              <f.inputWithLabel attrName='buildFile'
                                model={task}/>
              <f.inputWithLabel attrName='workingDirectory'
                                model={task}
                                end={true}/>
            </f.row>
          </TaskViews.base>
        );
      }
    },

    fetchartifact: {
      view: function (ctrl, args) {
        var task = args.task;
        return (
          <TaskViews.base {...args}>
            <f.row>
              <f.inputWithLabel attrName='pipeline'
                                model={task}/>
              <f.inputWithLabel attrName='stage'
                                model={task}/>
              <f.inputWithLabel attrName='job'
                                model={task}
                                end={true}/>
            </f.row>

            <f.row>
              <f.inputWithLabel attrName='type'
                                model={task.source()}/>
              <f.inputWithLabel attrName='location'
                                model={task.source()}
                                end={true}/>
            </f.row>
          </TaskViews.base>
        );
      }
    },

    plugin: {
      controller: function (args) {
        this.task              = args.task;
        this.templateHTML      = PluggableTasks.Types[this.task.pluginId()].templateHTML;
        this.defaultTaskConfig = PluggableTasks.Types[this.task.pluginId()].configuration;
        this.ngControllerName  = 'controller-' + this.task.uuid();
        this.appName           = 'app-' + this.task.uuid();
        this.ngModule          = angular.module(this.appName, []);

        this.hasBootstrapped = false;

        var ctrl = this;

        this.ngController = angular.module(this.appName).controller(this.ngControllerName, ['$scope', '$http', function ($scope, $http) {
          $scope.addError = function (field) {
            this.GOINPUTNAME[field.name] = {
              $error: {
                server: field.errors.join()
              }
            };
          };

          $scope.clearErrors = function () {
            this.GOINPUTNAME               = {};
            this.pluggableTaskGenericError = null;
          };

          $scope.clearErrors();

          var ajaxValidator = _.debounce(function (configuration, config, newValue) {
            configuration.setConfiguration(config.name, newValue);
            var req = {
              url:     Routes.apiInternalPluggableTaskValidationPath({plugin_id: ctrl.task.pluginId()}),
              method:  'POST',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': $('meta[name=csrf-token]').attr('content')
              },
              data:    JSON.stringify(configuration)
            };

            $http(req).then(
              $scope.clearErrors.bind($scope),
              function (response) {
                if (response.status === 422) {
                  _.each(response.data, $scope.addError, $scope);
                } else if (response.status === 520) {
                  $scope.pluggableTaskGenericError = response.data.error;
                } else {
                  console.log('Something went wrong, we do not know what!');
                }
              });
          }, 250);

          _.map(ctrl.defaultTaskConfig, function (config) {
            var configuration = ctrl.task.configuration();
            var value         = configuration.valueFor(config.name);

            if (!value) {
              value = config.value;
            }

            $scope[config.name] = value;

            $scope.$watch(config.name, function (newValue, oldValue) {
              ajaxValidator(configuration, config, newValue);
            });
          });
        }]);
      },

      view: function (ctrl, args) {
        var config = function (elem, isInitialized) {
          if (!isInitialized) {
            var pluginTaskElem            = $('#pluggable-task-' + ctrl.task.uuid());
            var pluginTaskTemplateElement = $('#pluggable-task-template-' + ctrl.task.uuid());
            angular.bootstrap(pluginTaskTemplateElement.get(0), [ctrl.appName]);
            pluginTaskElem.show();
          }
        };

        return (
          <div id={'pluggable-task-' + ctrl.task.uuid()} style='display:none' config={config}>
            <TaskViews.base {...args}>
              <div id={'pluggable-task-template-' + ctrl.task.uuid()} ng-controller={ctrl.ngControllerName}>
                <div class="alert-box alert"
                     ng-show="pluggableTaskGenericError">{'{{pluggableTaskGenericError}}'}</div>
                {m.trust(ctrl.templateHTML)}
              </div>
            </TaskViews.base>
          </div>
        );
      }
    }
  };

  var TaskTypeSelector = {
    controller: function (args) {
      this.tasks    = args.tasks;
      this.selected = m.prop('exec');
      this.addTask  = function (type) {
        if (Tasks.isBuiltInTaskType(type())) {
          this.tasks().createTask({type: type()});
        } else {
          var pluggableTaskDescriptor = PluggableTasks.Types[type()];
          this.tasks().createTask({
            type:     type(),
            pluginId: type(),
            version:  pluggableTaskDescriptor.version
          });
        }
      };
    },

    view: function (ctrl) {
      var items = _.transform(_.merge({}, Tasks.Types, PluggableTasks.Types), function (result, value, key) {
        result[key] = value.description;
      });

      return (
        <f.row class='task-selector'>
          <f.select value={ctrl.selected}
                    class='inline'
                    label='Add task of type'
                    items={items}
                    size={3}/>
          <f.column size={2} end={true} class='add-task'>
            <a href="javascript:void(0)" onclick={ctrl.addTask.bind(ctrl, ctrl.selected)}>Add</a>
          </f.column>
        </f.row>
      );
    }
  };

  var TasksConfigWidget = {
    controller: function (args) {
      this.args = args;
      ComponentMixins.HasViewModel.call(this);
    },

    view: function (ctrl, args) {

      var dragDropConfig = function (elem, isInitialized) {
        dragulaConfig(elem, isInitialized, function () {
          var reorderedTasks = _.map($(elem).find('.task-definition:not(.gu-mirror)'), function (eachTaskElem) {
            return args.tasks().taskAtIndex($(eachTaskElem).attr('data-task-index'));
          });
          args.tasks().setTasks(reorderedTasks);
        });
      };

      return (
        <f.accordion accordionTitles={[
                        (
                          <span>Tasks</span>
                        )
                     ]}
                     accordionKeys={['job-tasks']}
                     selectedIndex={ctrl.vmState('tasksSelected', m.prop(0))}
                     class="accordion-inner">
          <div class='task-definitions' key="task-definitions">
            <div config={dragDropConfig}>
              {args.tasks().mapTasks(function (task, taskIndex) {
                var taskView = TaskViews[task.type()];
                return (m.component(taskView, {
                  task: task,
                  onRemove: args.tasks().removeTask.bind(args.tasks(), task),
                  taskIndex: taskIndex,
                  key: task.uuid()
                }));
              })}
            </div>
            <TaskTypeSelector tasks={args.tasks} key="task-type-selector"/>
          </div>
        </f.accordion>
      );
    }
  };

  return TasksConfigWidget;
});
