/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function() {
  "use strict";

  const m = require("mithril");
  const $ = require("jquery");
  const _ = require('lodash');

  const PluginEndpoint           = require('rails-shared/plugin-endpoint');
  const PluginiFrameWidget       = require('views/analytics/plugin_iframe_widget');
  const Frame                    = require('models/analytics/frame');
  const Routes                   = require('gen/js-routes');

  const models = {};

  const PipelineMetrics = function() {
    let currentPipeline = null;

    function oninit(vnode) {
      currentPipeline = vnode.attrs.model.data.pipelines[0];
    }

    function view(vnode) { // eslint-disable-line no-unused-vars
      const pageItems = [];
      const pipelineOptions = _.map(vnode.attrs.model.data.pipelines, (pipeline) => {
        if (pipeline === currentPipeline) {
          return (<option selected>{pipeline}</option>);
        } else {
          return (<option>{pipeline}</option>);
        }
      });
      const dropdown = m("select", {
            onchange: function() { // eslint-disable-line object-shorthand
              currentPipeline = $(this).val();
              $.each(models, (uid, model) => {
                models[uid] = new Frame(m.redraw);
                models[uid].pluginId(model.pluginId());
                models[uid].url(Routes.pipelineAnalyticsPath({plugin_id: model.pluginId(), pipeline_name: currentPipeline, context: "dashboard"})); // eslint-disable-line camelcase
              });
            }
          }, pipelineOptions);
      pageItems.push(dropdown);

      let idx = 0;
      $.each(vnode.attrs.model.data.plugins, (pluginId, _) => { // eslint-disable-line no-unused-vars

        const uid = `f-${pluginId}:pipeline:${idx}`;
        let model = models[uid];
        if (!model) {
          model = models[uid] = new Frame(m.redraw);
          model.pluginId(pluginId);
          model.url(Routes.pipelineAnalyticsPath({plugin_id: pluginId, pipeline_name: currentPipeline, context: "dashboard"})); // eslint-disable-line camelcase
        }

        pageItems.push(m(PluginiFrameWidget, {model, pluginId, uid, init: PluginEndpoint.init}));
        idx++;
      });

      return pageItems;
    }
    return {view, oninit};
  };

  module.exports = PipelineMetrics;

})();
