/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const $                         = require('jquery');
const _                         = require('lodash');
const m                         = require('mithril');
const f                         = require('helpers/form_helper');
const Spinner                   = require('views/shared/spinner');
const ErrorCalloutWidget        = require('views/shared/error_callout');
const InfoCalloutWidget         = require('views/shared/info_callout');
const HeaderPanel               = require('views/shared/header_panel');
const ArtifactStores            = require('models/artifact_stores/artifact_stores');
const ArtifactStoresState       = require('views/artifact_stores/artifact_stores_state');
const ArtifactStorePluginWidget = require('views/artifact_stores/artifact_store_plugin_widget');
const PluginInfos               = require('models/shared/plugin_infos');

const ArtifactStoresWidget = (function () {

  let state;

  function oninit() {
    state = new ArtifactStoresState();

    const onSuccess = (artifactStoresResponse, pluginInfosResponse) => {
      state.updateWithData(artifactStoresResponse, pluginInfosResponse);
      m.redraw();
    };

    const onFailure = () => {
      state.updateWithApiError();
      m.redraw();
    };

    $.when(ArtifactStores.all(), PluginInfos.all(null, {type: 'artifact'})).then(onSuccess, onFailure);
  }

  function view() {
    if (state.error) {
      return (
        <ErrorCalloutWidget message="There was a problem fetching the artifact stores"/>
      );
    } else if (state.loading) {
      return (
        <Spinner/>
      );
    } else {
      const addButton        = (
        <f.button onclick="" class="add-artifact-store" disabled={state.noPlugins()}>
          Add
        </f.button>
      );
      const noPluginsMessage = state.noPlugins() ?
        <InfoCalloutWidget message="No artifact store plugins installed."/> : undefined;
      return (
        <div>
          <HeaderPanel title="Artifact Stores" button={addButton}/>
          <div class="artifact-stores">
            {noPluginsMessage}
          </div>
          {
            _.map(state.artifactStores.groupByArtifactStoreProperty('pluginId'), (stores, pluginId) => {
              const pluginInfo = state.findPluginInfo(pluginId);
              return (
                <ArtifactStorePluginWidget pluginId={pluginId} pluginInfo={pluginInfo} artifactStores={stores}/>
              );
            })
          }
        </div>
      );
    }
  }

  return {oninit, view};

})();

module.exports = ArtifactStoresWidget;
