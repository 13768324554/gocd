/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const $                         = require('jquery');
const _                         = require('lodash');
const f                         = require('helpers/form_helper');
const m                         = require('mithril');
const Stream                    = require('mithril/stream');
const Spinner                   = require('views/shared/spinner');
const ErrorCalloutWidget        = require('views/shared/error_callout');
const InfoCalloutWidget         = require('views/shared/info_callout');
const HeaderPanel               = require('views/shared/header_panel');
const ArtifactStores            = require('models/artifact_stores/artifact_stores');
const ArtifactStoresState       = require('views/artifact_stores/artifact_stores_state');
const ArtifactStorePluginWidget = require('views/artifact_stores/artifact_store_plugin_widget');
const ArtifactStoreModalBody    = require('views/artifact_stores/artifact_store_modal_body');
const PluginInfos               = require('models/shared/plugin_infos');
const Modal                     = require('views/shared/new_modal');

class ArtifactStoresWidget {

  constructor() {
    this.state = new ArtifactStoresState();
  }

  oninit() {
    this.state = new ArtifactStoresState();

    const onSuccess = (artifactStoresResponse, pluginInfosResponse) => {
      this.state.updateWithData(artifactStoresResponse, pluginInfosResponse);
      m.redraw();
    };

    const onFailure = () => {
      this.state.updateWithApiError();
      m.redraw();
    };

    $.when(ArtifactStores.all(), PluginInfos.all(null, {type: 'artifact'})).then(onSuccess, onFailure);
  }

  view() {
    if (this.state.error) {
      return (
        <ErrorCalloutWidget message="There was a problem fetching the artifact stores"/>
      );
    } else if (this.state.loading) {
      return (
        <Spinner/>
      );
    } else {
      const addButton        = (
        <f.button onclick={addClicked.bind(this)} class="add-artifact-store" disabled={this.state.noPlugins()}>
          Add
        </f.button>
      );
      const noPluginsMessage = this.state.noPlugins() ?
        <InfoCalloutWidget message="No artifact store plugins installed."/> : undefined;
      return (
        <div>
          <HeaderPanel title="Artifact Stores" button={addButton}/>
          <div class="artifact-stores">
            {noPluginsMessage}
            <f.dismissableCallout message={this.state.message}/>
          </div>
          {
            _.map(this.state.artifactStores.groupByArtifactStoreProperty('pluginId'), (stores, pluginId) => {
              const pluginInfo = this.state.findPluginInfo(pluginId);
              return (
                <ArtifactStorePluginWidget pluginId={pluginId} pluginInfo={pluginInfo} artifactStores={stores}/>
              );
            })
          }
        </div>
      );
    }
  }
}

function reloadArtifactStores(widget) {
  ArtifactStores.all().then((artifactStores) => {
    widget.state.artifactStores = artifactStores;
  }, (message) => {
    widget.state.setAlertMessage(message);
  }).always(m.redraw);
}

function addClicked() {
  const newArtifactStore = Stream(new ArtifactStores.ArtifactStore({}));

  const modal = new Modal({
    size:    'large',
    title:   'Add a new artifact store',
    body:    () => (<ArtifactStoreModalBody pluginInfos={this.state.pluginInfos} artifactStore={newArtifactStore}
                                            errorMessage={this.state.message}/>),
    onclose: () => modal.destroy(),
    buttons: [
      {
        text:    "Save",
        class:   'save primary',
        onclick: () => {
          newArtifactStore().create()
            .then(addSucceeded(modal, newArtifactStore, this), addFailed(modal, newArtifactStore, this))
            .always(m.redraw);
        }
      }
    ]
  });

  modal.render();
}

function addSucceeded(modal, newArtifactStore, widget) {
  return function () {
    modal.destroy();
    reloadArtifactStores(widget);
    widget.state.setSuccessMessage(`The artifact store ${newArtifactStore().id()} was created successfully.`);
  };
}

function addFailed(modal, newArtifactStore, widget) {
  return function (errorMessageOrStoreWithErrors) {
    if (_.isString(errorMessageOrStoreWithErrors)) {
      modal.destroy();
      widget.state.setAlertMessage(errorMessageOrStoreWithErrors);
    } else {
      widget.state.resetMessage();
      newArtifactStore(errorMessageOrStoreWithErrors);
    }
  };
}

module.exports = ArtifactStoresWidget;
