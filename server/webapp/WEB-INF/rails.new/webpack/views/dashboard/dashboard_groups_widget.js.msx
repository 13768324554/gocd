const m              = require("mithril");
const _              = require("lodash");
const f              = require("helpers/form_helper");
const Routes         = require("gen/js-routes");
const PipelineWidget = require("views/dashboard/pipeline_widget");

const GroupHeading = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const scheme = vnode.attrs.scheme;
    const tt = vm.canAdminister ? "" : "You do not have permission to edit.";

    return <h2 class="dashboard-group_title">
      <strong><f.link disabled={!vm.canAdminister} href={vm.path}>{vm.name}</f.link></strong>
      <f.link class="edit_config dashboard-group_edit-config" disabled={!vm.canAdminister} href={vm.editPath} tooltipText={tt} />
    </h2>;
  }
};

const Group = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const resolver = vnode.attrs.resolver;
    const pipelines = vm.resolvePipelines(resolver);

    const sharedArgs = _.assign({}, vnode.attrs);
    _.each(["vm", "resolver", "pipelines", "scheme"], (k) => delete sharedArgs[k]);

    return <div class="dashboard-group" key={vm.name}>
      <GroupHeading {...vnode.attrs} />
      <ul class="dashboard-group_items">
        {_.map(pipelines, (pipeline) => <PipelineWidget pipeline={pipeline} key={pipeline.name} {...sharedArgs} />)}
      </ul>
    </div>;
  }
};

const DashboardGroupsWidget = {
  view(vnode) {
    const sharedArgs = _.assign({}, vnode.attrs);
    delete sharedArgs.groups;

    return _.map(vnode.attrs.groups, (group) => <Group vm={group} {...sharedArgs} />);
  }
};

module.exports = DashboardGroupsWidget;
