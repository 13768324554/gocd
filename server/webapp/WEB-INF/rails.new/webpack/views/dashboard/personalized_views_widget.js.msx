/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const m                   = require('mithril');
const Stream              = require('mithril/stream');
const _                   = require('lodash');
const $                   = require('jquery');
const PersonalizeWidget   = require('views/dashboard/personalize_widget');
const PipelineSelectionVM = require('views/dashboard/models/pipeline_selection_view_model');
const PipelineSelection   = require('models/dashboard/pipeline_selection');

const PersonalizedViewsWidget = {
  oninit(vnode) {
    const self = vnode.state;
    self.pipelineSelection   = Stream();
    self.pipelineSelectionVM = new PipelineSelectionVM();
    self.ready = Stream(false);

    PipelineSelection.get().then((selection) => {
      selection.setCurrentFilter(vnode.attrs.currentTab());
      self.pipelineSelection(selection);
      self.pipelineSelectionVM.initialize(selection.pipelineGroups());
      self.ready = Stream(true);
    }).then(m.redraw);

    this.switchTab = (e) => {
      let tabName = $(e.target).text();
      if (tabName === "default") {
        tabName = null;
      }
      window.location.search = m.buildQueryString({viewName: tabName});
    };
  },

  view(vnode) {
    const self              = vnode.state;
    const pipelineSelection = self.pipelineSelection();

    let personalizeView;
    if (vnode.attrs.isOpen()) {
      personalizeView = (<PersonalizeWidget pipelineSelection={self.pipelineSelection}
                                            widgetOpen={vnode.attrs.isOpen}
                                            doRefreshImmediately={vnode.attrs.doRefreshImmediately}
                                            hideSelectionDropdown={vnode.attrs.hideSelectionDropdown}
                                            vm={self.pipelineSelectionVM}/>);
    }

    let tabs;

    if (self.ready()) {
      tabs = _.map(pipelineSelection.displayNames(), (filterName) => {
        if (pipelineSelection.currentFilter.displayName() === filterName) {
          return (
            <div class="dashboard-tab current">
            <i class="fa fa-bars" />
            <div class="tab-name">{filterName}</div>
            {personalizeView}
            </div>
          );
        } else {
          return (
            <div class="dashboard-tab">
              <i class="fa fa-bars" />
              <div class="tab-name"
                onclick={this.switchTab.bind(this)}>
                {filterName}
              </div>
            </div>
          );
        }
      });
    }

    return (
      <div class="dashboard-tabs">
        {tabs}
        <div class="add-tab">
          <i class="fa fa-plus" />
        </div>
      </div>
    );
  }
};

module.exports = PersonalizedViewsWidget;
