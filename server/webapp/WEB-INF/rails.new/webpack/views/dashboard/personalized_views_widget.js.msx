/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const _ = require('lodash');
const m = require('mithril');
const f = require("helpers/form_helper");

const PersonalizeEditorVM        = require('views/dashboard/models/personalize_editor_vm');
const PersonalizationModalWidget = require('views/dashboard/personalization_modal_widget');
const Modal                      = require('views/shared/schmodal');

const PersonalizedViewsWidget = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const model = vnode.attrs.model;
    const onchange = vnode.attrs.onchange;

    const doAddView = vm.actionHandler(() => personalizeEditor({}, model, vm, onchange));
    const doEditView = vm.actionHandler(() => personalizeEditor(model.namedFilter(vm.currentView()), model, vm, onchange));
    const doDeleteView = vm.actionHandler(() => deleteView(vm.currentView(), model, vm, onchange));

    return <div class="dashboard-tabs">
      <AllViewTabs vm={vm} onEdit={doEditView} onDelete={doDeleteView} />
      <AddTab onclick={doAddView} />
    </div>;
  }
};

/** private components */

const AllViewTabs = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    return _.map(vm.names(), (name) => <ViewTab {...vnode.attrs} name={name} />);
  }
};

const AddTab = {
  view(vnode) {
    return <div class="add-tab" {...vnode.attrs}>
      <i class="fa fa-plus" />
    </div>;
  }
};

const ViewTab = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const name = vnode.attrs.name;
    const current = vm.active(name);

    const topLevelClasses = current ? "dashboard-tab current" : "dashboard-tab";
    const switchTab = current || function (e) { e.stopPropagation(); vm.activate(name); };

    return <div class={topLevelClasses} onclick={switchTab}>
      <i class="fa fa-bars drag-icon" />
      <div class="tab-name">{name}</div>
      <DropdownToggle {...vnode.attrs} current={current} />
    </div>;
  }
};

const DropdownToggle = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const current = vnode.attrs.current;

    if (current) {
      const toggleDropdown = (e) => { e.stopPropagation(); vm.toggleDropdown(); };
      const onEdit = vnode.attrs.onEdit;
      const onDelete = vnode.attrs.onDelete;
      return <div class="tab-dropdown">
        <i class="fa fa-caret-down dropdown-btn" onclick={toggleDropdown} />
        <TabDropdown vm={vm} edit={onEdit} delete={onDelete} />
      </div>;
    }
  }
};

const TabDropdown = {
  view(vnode) {
    const vm = vnode.attrs.vm;

    if (vm.dropdownVisible()) {
      return <div class="edit-dropdown" onclick={(e) => e.stopPropagation()}>
        <span class="edit-dropdown-text">Group pipelines by</span>
        <div class="edit-dropdown-actions">
          <f.button class="btn btn-small selected">Pipeline Group</f.button>
          <f.button class="btn btn-small">Environments</f.button>
          <i class="fa fa-edit" onclick={vnode.attrs.edit} />
          <i class="fa fa-trash" onclick={vnode.attrs.delete} />
        </div>
      </div>;
    }
  }
};

function personalizeEditor(template, personalization, model, afterUpdate) {
  const vm = new PersonalizeEditorVM(template, personalization.pipelineGroups());
  const existing = template.name;

  new Modal({
    title: existing ? `Edit ${template.name}`: "Create new view",
    size: "personalize-editor",
    body: () => {
      return <PersonalizationModalWidget vm={vm} />;
    },
    buttons: [{text: "Apply", onclick: () => {
      const newFilter = vm.asFilter();
      personalization.addOrReplaceFilter(existing, newFilter).done(() => {
        model.currentView(newFilter.name);
        model.names(personalization.names());
        afterUpdate();
      }).always(() => {
        Modal.close();
        m.redraw();
      });
    }}, {text: "Cancel", class: "btn-link"}]
  });
}

function deleteView(name, personalization, model, afterDelete) {
  personalization.removeFilter(name).done(() => {
    model.currentView("Default");
    model.names(personalization.names());
    afterDelete();
  }).always(() => {
    m.redraw();
  });
}

module.exports = PersonalizedViewsWidget;
