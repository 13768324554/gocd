/*
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const _   = require("lodash");
const m   = require("mithril");
const d   = require("dragula");
const raf = require("helpers/throttle-raf");

const SortableViewTabs = {
  oncreate: initSortable,

  view(vnode) {
    const vm = vnode.attrs.vm;
    const attrs = { class: "dashboard-tabs-sortable", onscroll: raf(() => vm.hideDropdown()) };

    return m("nav", attrs, _.map(vm.names(), (name) => <ViewTab {...vnode.attrs} name={name} />));
  }
};

const ViewTab = {
  view(vnode) {
    const vm = vnode.attrs.vm;
    const name = vnode.attrs.name;
    const current = vm.active(name);

    function switchTab(e) { e.stopPropagation(); vm.activate(name); }

    if (current) { vm.currentVnode(vnode); }

    return <div class={current ? "dashboard-tab current" : "dashboard-tab"} onclick={current || switchTab} data-name={name}>
      <i class="drag-icon" />
      <div class="tab-name">{name}</div>
      <DropdownToggle {...vnode.attrs} current={current} />
    </div>;
  }
};

const DropdownToggle = {
  view(vnode) {
    const vm = vnode.attrs.vm;

    function toggleDropdown(e) { e.stopPropagation(); vm.toggleDropdown(); }

    if (vnode.attrs.current) {
      return <div class="tab-dropdown-toggle">
        <i class="fa fa-caret-down dropdown-btn" onclick={toggleDropdown} />
      </div>;
    }
  }
};

function initSortable(vnode) {
  const vm = vnode.attrs.vm;

  d([vnode.dom], {
    moves(_el, _src, handle) { return handle.classList.contains("drag-icon"); },
    direction: "horizontal"
  }).on("cloned", () => {
    vm.hideDropdown();
    m.redraw();
  }).on("drop", function sync(src, _t, _c, dest) {
    const drake = this;

    vm.model().reorderFilter(nameOf(src), nameOf(dest), vm.etag()).
      done((data) => vm.checksum(data.contentHash)).
      fail((xhr) => {
        drake.cancel(true);
        vm.etag(true); // force refresh
        // Need to figure out where to display error responses from server; currently not displayed
        vm.errorMessage(xhr.status === 412 ? "You'd better slow down, turbo." : xhr.responseText);
      }).always(m.redraw);
  });
}

function nameOf(tabEl) { return tabEl ? tabEl.getAttribute("data-name") : null; }

module.exports = SortableViewTabs;
