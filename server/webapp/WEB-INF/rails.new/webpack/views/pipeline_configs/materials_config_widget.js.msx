/*
 * Copyright 2016 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var m                    = require('mithril');
var Stream               = require('mithril/stream');
var _                    = require('lodash');
var s                    = require('string-plus');
var f                    = require('helpers/form_helper');
var tt                   = require('helpers/pipeline_configs/tooltips');
var ComponentMixins      = require('helpers/mithril_component_mixins');
var Materials            = require('models/pipeline_configs/materials');
var TestConnectionWidget = require('views/pipeline_configs/test_connection_widget');
var PipelineStageField   = require('views/pipeline_configs/pipeline_stage_field_widget');
var Pipelines            = require('models/pipeline_configs/pipelines');
var PluggableSCMs        = require('models/pipeline_configs/pluggable_scms');
var PluggableSCMWidget   = require('views/pipeline_configs/pluggable_scm_widget');
var MaterialFilterWidget = require('views/pipeline_configs/material_filter_widget');
var PluginInfos          = require('models/pipeline_configs/plugin_infos');

var PasswordField = {
  view: function (vnode) {
    var model               = vnode.attrs.model;
    var attrName            = vnode.attrs.attrName;
    var capitalizedAttrName = _.upperFirst(attrName);

    if (model['isEditing' + capitalizedAttrName]()) {
      return (
        <div>
          <f.inputWithLabel model={model}
                            attrName={attrName}
                            label={['Password ']}
                            placeholder="Password"
                            type='password'
                            withReset={true}/>
        </div>
      );
    } else {
      return (
        <f.column>
          <label>
            Password{' '}
            <f.link onclick={model['edit' + capitalizedAttrName].bind(model)}>Edit</f.link>
          </label>
          <input type='password'
                 readonly={true}
                 value={s.uuid()}/>
        </f.column>
      );
    }
  }
};

var UrlField = {
  view: function (vnode) {
    return (
      <f.inputWithLabel attrName='url'
                        type='url'
                        validate={true}
                        isRequired={true}
                        model={vnode.attrs.material}/>
    );
  }
};

var UsernameField = {
  view: function (vnode) {
    return (
      <f.inputWithLabel attrName='username'
                        model={vnode.attrs.material}/>
    );
  }
};

var DestinationField = {
  view: function (vnode) {
    return (
      <f.inputWithLabel attrName='destination'
                        label="Destination"
                        model={vnode.attrs.material}
                        validate={true}
                        tooltip={{
                          content:   tt.material.destination,
                          direction: 'bottom',
                          size:      'small'
                        }}/>
    );
  }
};


var NameField = {
  view: function (vnode) {
    return (
      <f.inputWithLabel attrName='name'
                        validate={true}
                        model={vnode.attrs.material}
                        tooltip={{
                          content:   tt.material.name,
                          direction: 'bottom',
                          size:      'small'
                        }}/>
    );
  }
};

var BranchField = {
  view: function (vnode) {
    return (
      <f.inputWithLabel attrName='branch'
                        model={vnode.attrs.material}/>
    );
  }
};

var AutoUpdateField = {
  view: function (vnode) {
    return (
      <f.checkBox model={vnode.attrs.material}
                  attrName='autoUpdate'
                  addPadding={true}
                  end={true}/>
    );
  }
};

var TestConnection = {
  oninit: function () {
    ComponentMixins.HasViewModel.call(this);
  },

  view: function (vnode) {
    return (
      <f.row>
        <f.column size={12} largeSize={12}>
          <TestConnectionWidget material={vnode.attrs.material}
                                pipelineName={vnode.attrs.pipelineName}
                                vm={vnode.state.vmState('testConnection')}/>
        </f.column>
      </f.row>
    );
  }
};

var MaterialViews = {
  base: {
    oninit: function (vnode) {
      this.args = vnode.attrs;
      ComponentMixins.HasViewModel.call(this);
    },

    view: function (vnode) {
      var children = vnode.children;

      var title = function () {
        if (Materials.isBuiltInType(vnode.attrs.material.type())) {
          return [vnode.attrs.material.type(), '-', vnode.attrs.material.name()].join(' ');
        }
        if (vnode.attrs.material.type() === 'plugin') {
          return [vnode.attrs.material.type(), '-', vnode.attrs.material.scm() ? vnode.attrs.material.scm().name() : ''].join(' ');
        } else {
          return vnode.attrs.material.type();
        }
      };

      return (
        <f.accordion class="material-definitions accordion-inner"
                     accordionTitles={[title()]}
                     accordionKeys={[vnode.attrs.material.uuid()]}
                     selectedIndex={vnode.state.vmState('selectedMaterialIndex', Stream(-1))}>

          <div class="material-definition">
            <f.removeButton onclick={vnode.attrs.onRemove.bind(this, vnode.attrs.material)} class="remove-material"/>
            {children}
          </div>
        </f.accordion>
      );
    }
  },

  svn: {
    view: function (vnode) {
      var material = vnode.attrs.material;

      return (
        <MaterialViews.base {...vnode.attrs}>
          <f.row>
            <NameField material={material}/>
            <UrlField material={material}/>
            <AutoUpdateField material={material}/>
          </f.row>
          <f.row>
            <UsernameField material={material}/>
            <PasswordField model={material}
                           attrName='passwordValue'/>
            <f.checkBox type="checkbox"
                        model={material}
                        attrName='checkExternals'
                        addPadding={true}
                        end={true}/>
          </f.row>
          <f.row>
            <DestinationField material={material}/>
          </f.row>
          <TestConnection material={material} pipelineName={vnode.attrs.pipelineName}/>
          <MaterialFilterWidget material={material}/>
        </MaterialViews.base>
      );
    }
  },

  git: {
    view: function (vnode) {
      var material = vnode.attrs.material;

      return (
        <MaterialViews.base {...vnode.attrs}>
          <f.row>
            <NameField material={material}/>
            <UrlField material={material}/>
            <AutoUpdateField material={material}/>
          </f.row>
          <f.row>
            <BranchField material={material}/>
            <f.checkBox model={vnode.attrs.material}
                        attrName='shallowClone'
                        label="Shallow clone (recommended for large repositories)"
                        addPadding={true}
                        end={true}/>
          </f.row>
          <f.row>
            <DestinationField material={material}/>
          </f.row>
          <TestConnection material={material} pipelineName={vnode.attrs.pipelineName}/>
          <MaterialFilterWidget material={material}/>
        </MaterialViews.base>
      );
    }
  },

  hg: {
    view: function (vnode) {
      var material = vnode.attrs.material;
      return (
        <MaterialViews.base {...vnode.attrs}>
          <f.row>
            <NameField material={material}/>
            <UrlField material={material}/>
            <AutoUpdateField material={material}/>
          </f.row>
          <f.row>
            <DestinationField material={material}/>
          </f.row>
          <TestConnection material={material} pipelineName={vnode.attrs.pipelineName}/>
          <MaterialFilterWidget material={material}/>
        </MaterialViews.base>
      );
    }
  },

  p4: {
    view: function (vnode) {
      var material = vnode.attrs.material;
      return (
        <MaterialViews.base {...vnode.attrs}>
          <f.row>
            <NameField material={material}/>
            <f.inputWithLabel attrName='port'
                              model={material}
                              validate={true}
                              isRequired={true}
                              label="Server and Port"
                              onChange={m.withAttr('value', material.port)}/>
            <AutoUpdateField material={material}/>
          </f.row>
          <f.row>
            <UsernameField material={material}/>
            <PasswordField model={material}
                           attrName='passwordValue'/>
          </f.row>
          <f.row>
            <f.textareaWithLabel attrName='view'
                                 validate={true}
                                 isRequired={true}
                                 model={material}
                                 size={4}/>
            <f.checkBox name="material[use_tickets]"
                        type="checkbox"
                        model={material}
                        attrName='useTickets'
                        addPadding={true}
                        end={true}/>
          </f.row>
          <f.row>
            <DestinationField material={material}/>
          </f.row>
          <TestConnection material={material} pipelineName={vnode.attrs.pipelineName}/>
          <MaterialFilterWidget material={material}/>
        </MaterialViews.base>
      );
    }
  },

  tfs: {
    view: function (vnode) {
      var material = vnode.attrs.material;
      return (
        <MaterialViews.base {...vnode.attrs}>
          <f.row>
            <NameField material={material}/>
            <UrlField material={material}/>
            <AutoUpdateField material={material}/>
          </f.row>
          <f.row>
            <f.inputWithLabel attrName='domain'
                              model={material}/>
            <f.inputWithLabel attrName='projectPath'
                              model={material}
                              validate={true}
                              isRequired={true}
                              end={true}/>
          </f.row>
          <f.row>
            <f.inputWithLabel attrName='username'
                              model={material}
                              isRequired={true}
                              validate={true}/>
            <PasswordField model={material}
                           attrName='passwordValue'
                           end={true}/>
          </f.row>
          <f.row>
            <DestinationField material={material}/>
          </f.row>
          <TestConnection material={material} pipelineName={vnode.attrs.pipelineName}/>
          <MaterialFilterWidget material={material}/>
        </MaterialViews.base>
      );
    }
  },

  dependency: {
    view: function (vnode) {
      var material = vnode.attrs.material;

      return (
        <MaterialViews.base {...vnode.attrs}>
          <f.row>
            <NameField material={material}/>
            <f.column size={4} end='true'>
              <PipelineStageField material={material} pipelines={vnode.attrs.pipelines}/>
            </f.column>
          </f.row>
        </MaterialViews.base>
      );
    }
  },

  plugin: {
    view: function (vnode) {
      var material = vnode.attrs.material;

      return (
        <MaterialViews.base {...vnode.attrs}>
          <PluggableSCMWidget material={material}/>
        </MaterialViews.base>
      );
    }
  },

  package: {
    view: function (vnode) {
      return (
        <MaterialViews.base {...vnode.attrs}>
          <f.info>Package materials edit is not yet supported, click
            <f.link
              href={["/go/admin/pipelines/", vnode.attrs.pipelineName(), "/materials?current_tab=materials"].join('')}>
              here
            </f.link>
            to edit.
          </f.info>
        </MaterialViews.base>
      );
    }
  }

};

var MaterialTypeSelector = {
  oninit: function () {
    this.selected = Stream('git');
  },

  view: function (vnode) {
    var items = _.reduce(_.merge({}, Materials.Types, PluggableSCMs.Types), function (accumulator, value, key) {
      accumulator.push({id: key, text: value.description});
      return accumulator;
    }, []);

    return (
      <f.row class='material-selector'>
        <f.select
          model={vnode.state}
          attrName='selected'
          class='inline'
          label='Add a new material of type'
          items={items}
          size={3}
          largeSize={3}/>
        <f.column size={2} end={true}>
          <f.link class='add-button button'
                  onclick={vnode.attrs.createMaterial.bind(vnode.state, vnode.state.selected)}>Add
          </f.link>
        </f.column>
      </f.row>
    );
  }
};

var MaterialsConfigWidget = {
  oninit: function (vnode) {
    var self       = this;
    self.args      = vnode.attrs;
    self.pipelines = Pipelines.init(vnode.attrs.pipelineName());
    ComponentMixins.HasViewModel.call(self);

    self.removeMaterial = function (materials) {
      return function (material) {
        materials().removeMaterial(material);
      };
    };

    self.createMaterial = function (materials) {
      return function (type) {
        var newMaterial = Materials.isBuiltInType(type()) ? materials().createMaterial({type: type()})
          : materials().createMaterial({type: type(), pluginInfo: PluginInfos.findById(type())});

        var indexOfMaterial = materials().indexOfMaterial(newMaterial);
        self.vmState('material-' + indexOfMaterial, {selectedMaterialIndex: Stream(0)});
      };
    };
  },

  view: function (vnode) {
    return (
      <f.accordion accordionTitles={[(<span>Materials</span>)]}
                   accordionKeys={['materials']}
                   class='materials'
                   selectedIndex={vnode.state.vmState('materialsSelected', Stream(-1))}>
        <div>
          {vnode.attrs.materials().mapMaterials(function (material, index) {
            var materialView = MaterialViews[material.type()];
            return (m(materialView, {
              material:     material,
              onRemove:     vnode.state.removeMaterial(vnode.attrs.materials),
              key:          material.uuid(),
              pipelineName: vnode.attrs.pipelineName,
              pipelines:    vnode.state.pipelines,
              vm:           vnode.state.vmState('material-' + index)
            }));
          })}
          <MaterialTypeSelector createMaterial={vnode.state.createMaterial(vnode.attrs.materials)}
                                key='material-type-selector'/>
        </div>
      </f.accordion>
    );
  }
};

module.exports = MaterialsConfigWidget;
